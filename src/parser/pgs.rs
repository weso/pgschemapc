/// Generated by rustemo. Do not edit manually!
use std::fmt::Debug;
use std::hash::Hash;
use rustemo::{
    Result, Input as InputT, Lexer, Token, TokenRecognizer as TokenRecognizerT, Parser,
    ParserDefinition, State as StateT, Builder,
};
use rustemo::regex::Regex;
use rustemo::once_cell::sync::Lazy;
use rustemo::StringLexer;
use rustemo::LRBuilder;
use super::pgs_actions;
use rustemo::{LRParser, LRContext};
use rustemo::Action::{self, Shift, Reduce, Accept};
#[allow(unused_imports)]
use rustemo::debug::{log, logn};
#[allow(unused_imports)]
#[cfg(debug_assertions)]
use rustemo::colored::*;
pub type Input = str;
const STATE_COUNT: usize = 59usize;
const MAX_RECOGNIZERS: usize = 4usize;
#[allow(dead_code)]
const TERMINAL_COUNT: usize = 20usize;
#[allow(clippy::upper_case_acronyms)]
#[derive(Debug, Default, Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]
pub enum TokenKind {
    #[default]
    STOP,
    IDENTIFIER,
    SEMICOLON,
    CREATE,
    NODE,
    EDGE,
    GRAPH,
    TYPE,
    OPEN_PAREN,
    CLOSE_PAREN,
    OPEN_ARROW,
    CLOSE_ARROW,
    OPEN_CURLY,
    CLOSE_CURLY,
    COLON,
    COMMA,
    BAR,
    INTEGER_NAME,
    STRING_NAME,
    DATE_NAME,
}
use TokenKind as TK;
impl From<TokenKind> for usize {
    fn from(t: TokenKind) -> Self {
        t as usize
    }
}
#[allow(clippy::enum_variant_names)]
#[derive(Clone, Copy, PartialEq)]
pub enum ProdKind {
    PgsP1,
    CreateTypeP1,
    CreateTypeP2,
    CreateTypeP3,
    CreateNodeTypeP1,
    CreateEdgeTypeP1,
    CreateGraphTypeP1,
    NodeTypeP1,
    EdgeTypeP1,
    GraphTypeP1,
    TypeNameP1,
    EndpointTypeP1,
    LabelPropertySpecP1,
    LabelSpecOptP1,
    LabelSpecOptP2,
    PropertySpecOptP1,
    PropertySpecOptP2,
    LabelSpecP1,
    PropertySpecP1,
    PropertiesEachOf,
    PropertiesOneOf,
    PropertiesParen,
    PropertiesP4,
    PropertyP1,
    keyP1,
    TypeSpecP1,
    SimpleTypeP1,
    SimpleTypeP2,
    SimpleTypeP3,
}
use ProdKind as PK;
impl std::fmt::Debug for ProdKind {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let name = match self {
            ProdKind::PgsP1 => "Pgs: CreateType SEMICOLON",
            ProdKind::CreateTypeP1 => "CreateType: CreateNodeType",
            ProdKind::CreateTypeP2 => "CreateType: CreateEdgeType",
            ProdKind::CreateTypeP3 => "CreateType: CreateGraphType",
            ProdKind::CreateNodeTypeP1 => "CreateNodeType: CREATE NODE TYPE NodeType",
            ProdKind::CreateEdgeTypeP1 => "CreateEdgeType: CREATE EDGE TYPE EdgeType",
            ProdKind::CreateGraphTypeP1 => "CreateGraphType: CREATE GRAPH TYPE GraphType",
            ProdKind::NodeTypeP1 => {
                "NodeType: OPEN_PAREN TypeName LabelPropertySpec CLOSE_PAREN"
            }
            ProdKind::EdgeTypeP1 => {
                "EdgeType: EndpointType OPEN_ARROW TypeName LabelPropertySpec CLOSE_ARROW EndpointType"
            }
            ProdKind::GraphTypeP1 => "GraphType: TypeName OPEN_CURLY CLOSE_CURLY",
            ProdKind::TypeNameP1 => "TypeName: IDENTIFIER",
            ProdKind::EndpointTypeP1 => {
                "EndpointType: OPEN_PAREN LabelPropertySpec CLOSE_PAREN"
            }
            ProdKind::LabelPropertySpecP1 => {
                "LabelPropertySpec: LabelSpecOpt PropertySpecOpt"
            }
            ProdKind::LabelSpecOptP1 => "LabelSpecOpt: LabelSpec",
            ProdKind::LabelSpecOptP2 => "LabelSpecOpt: ",
            ProdKind::PropertySpecOptP1 => "PropertySpecOpt: PropertySpec",
            ProdKind::PropertySpecOptP2 => "PropertySpecOpt: ",
            ProdKind::LabelSpecP1 => "LabelSpec: COLON IDENTIFIER",
            ProdKind::PropertySpecP1 => "PropertySpec: OPEN_CURLY Properties CLOSE_CURLY",
            ProdKind::PropertiesEachOf => "Properties: Properties COMMA Properties",
            ProdKind::PropertiesOneOf => "Properties: Properties BAR Properties",
            ProdKind::PropertiesParen => "Properties: OPEN_PAREN Properties CLOSE_PAREN",
            ProdKind::PropertiesP4 => "Properties: Property",
            ProdKind::PropertyP1 => "Property: key COLON TypeSpec",
            ProdKind::keyP1 => "key: IDENTIFIER",
            ProdKind::TypeSpecP1 => "TypeSpec: SimpleType",
            ProdKind::SimpleTypeP1 => "SimpleType: STRING_NAME",
            ProdKind::SimpleTypeP2 => "SimpleType: INTEGER_NAME",
            ProdKind::SimpleTypeP3 => "SimpleType: DATE_NAME",
        };
        write!(f, "{name}")
    }
}
#[allow(clippy::upper_case_acronyms)]
#[allow(dead_code)]
#[derive(Clone, Copy, Debug)]
pub enum NonTermKind {
    EMPTY,
    AUG,
    Pgs,
    CreateType,
    CreateNodeType,
    CreateEdgeType,
    CreateGraphType,
    NodeType,
    EdgeType,
    GraphType,
    TypeName,
    EndpointType,
    LabelPropertySpec,
    LabelSpecOpt,
    PropertySpecOpt,
    LabelSpec,
    PropertySpec,
    Properties,
    Property,
    key,
    TypeSpec,
    SimpleType,
}
impl From<ProdKind> for NonTermKind {
    fn from(prod: ProdKind) -> Self {
        match prod {
            ProdKind::PgsP1 => NonTermKind::Pgs,
            ProdKind::CreateTypeP1 => NonTermKind::CreateType,
            ProdKind::CreateTypeP2 => NonTermKind::CreateType,
            ProdKind::CreateTypeP3 => NonTermKind::CreateType,
            ProdKind::CreateNodeTypeP1 => NonTermKind::CreateNodeType,
            ProdKind::CreateEdgeTypeP1 => NonTermKind::CreateEdgeType,
            ProdKind::CreateGraphTypeP1 => NonTermKind::CreateGraphType,
            ProdKind::NodeTypeP1 => NonTermKind::NodeType,
            ProdKind::EdgeTypeP1 => NonTermKind::EdgeType,
            ProdKind::GraphTypeP1 => NonTermKind::GraphType,
            ProdKind::TypeNameP1 => NonTermKind::TypeName,
            ProdKind::EndpointTypeP1 => NonTermKind::EndpointType,
            ProdKind::LabelPropertySpecP1 => NonTermKind::LabelPropertySpec,
            ProdKind::LabelSpecOptP1 => NonTermKind::LabelSpecOpt,
            ProdKind::LabelSpecOptP2 => NonTermKind::LabelSpecOpt,
            ProdKind::PropertySpecOptP1 => NonTermKind::PropertySpecOpt,
            ProdKind::PropertySpecOptP2 => NonTermKind::PropertySpecOpt,
            ProdKind::LabelSpecP1 => NonTermKind::LabelSpec,
            ProdKind::PropertySpecP1 => NonTermKind::PropertySpec,
            ProdKind::PropertiesEachOf => NonTermKind::Properties,
            ProdKind::PropertiesOneOf => NonTermKind::Properties,
            ProdKind::PropertiesParen => NonTermKind::Properties,
            ProdKind::PropertiesP4 => NonTermKind::Properties,
            ProdKind::PropertyP1 => NonTermKind::Property,
            ProdKind::keyP1 => NonTermKind::key,
            ProdKind::TypeSpecP1 => NonTermKind::TypeSpec,
            ProdKind::SimpleTypeP1 => NonTermKind::SimpleType,
            ProdKind::SimpleTypeP2 => NonTermKind::SimpleType,
            ProdKind::SimpleTypeP3 => NonTermKind::SimpleType,
        }
    }
}
#[allow(clippy::enum_variant_names)]
#[derive(Default, Clone, Copy, PartialEq, Eq, PartialOrd, Ord)]
pub enum State {
    #[default]
    AUGS0,
    CREATES1,
    PgsS2,
    CreateTypeS3,
    CreateNodeTypeS4,
    CreateEdgeTypeS5,
    CreateGraphTypeS6,
    NODES7,
    EDGES8,
    GRAPHS9,
    SEMICOLONS10,
    TYPES11,
    TYPES12,
    TYPES13,
    OPEN_PARENS14,
    NodeTypeS15,
    OPEN_PARENS16,
    EdgeTypeS17,
    EndpointTypeS18,
    IDENTIFIERS19,
    GraphTypeS20,
    TypeNameS21,
    TypeNameS22,
    COLONS23,
    LabelPropertySpecS24,
    LabelSpecOptS25,
    LabelSpecS26,
    OPEN_ARROWS27,
    OPEN_CURLYS28,
    LabelPropertySpecS29,
    IDENTIFIERS30,
    CLOSE_PARENS31,
    OPEN_CURLYS32,
    PropertySpecOptS33,
    PropertySpecS34,
    TypeNameS35,
    CLOSE_CURLYS36,
    CLOSE_PARENS37,
    IDENTIFIERS38,
    OPEN_PARENS39,
    PropertiesS40,
    PropertyS41,
    keyS42,
    LabelPropertySpecS43,
    PropertiesS44,
    CLOSE_CURLYS45,
    COMMAS46,
    BARS47,
    COLONS48,
    CLOSE_ARROWS49,
    CLOSE_PARENS50,
    PropertiesS51,
    PropertiesS52,
    INTEGER_NAMES53,
    STRING_NAMES54,
    DATE_NAMES55,
    TypeSpecS56,
    SimpleTypeS57,
    EndpointTypeS58,
}
impl StateT for State {
    fn default_layout() -> Option<Self> {
        None
    }
}
impl From<State> for usize {
    fn from(s: State) -> Self {
        s as usize
    }
}
impl std::fmt::Debug for State {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let name = match self {
            State::AUGS0 => "0:AUG",
            State::CREATES1 => "1:CREATE",
            State::PgsS2 => "2:Pgs",
            State::CreateTypeS3 => "3:CreateType",
            State::CreateNodeTypeS4 => "4:CreateNodeType",
            State::CreateEdgeTypeS5 => "5:CreateEdgeType",
            State::CreateGraphTypeS6 => "6:CreateGraphType",
            State::NODES7 => "7:NODE",
            State::EDGES8 => "8:EDGE",
            State::GRAPHS9 => "9:GRAPH",
            State::SEMICOLONS10 => "10:SEMICOLON",
            State::TYPES11 => "11:TYPE",
            State::TYPES12 => "12:TYPE",
            State::TYPES13 => "13:TYPE",
            State::OPEN_PARENS14 => "14:OPEN_PAREN",
            State::NodeTypeS15 => "15:NodeType",
            State::OPEN_PARENS16 => "16:OPEN_PAREN",
            State::EdgeTypeS17 => "17:EdgeType",
            State::EndpointTypeS18 => "18:EndpointType",
            State::IDENTIFIERS19 => "19:IDENTIFIER",
            State::GraphTypeS20 => "20:GraphType",
            State::TypeNameS21 => "21:TypeName",
            State::TypeNameS22 => "22:TypeName",
            State::COLONS23 => "23:COLON",
            State::LabelPropertySpecS24 => "24:LabelPropertySpec",
            State::LabelSpecOptS25 => "25:LabelSpecOpt",
            State::LabelSpecS26 => "26:LabelSpec",
            State::OPEN_ARROWS27 => "27:OPEN_ARROW",
            State::OPEN_CURLYS28 => "28:OPEN_CURLY",
            State::LabelPropertySpecS29 => "29:LabelPropertySpec",
            State::IDENTIFIERS30 => "30:IDENTIFIER",
            State::CLOSE_PARENS31 => "31:CLOSE_PAREN",
            State::OPEN_CURLYS32 => "32:OPEN_CURLY",
            State::PropertySpecOptS33 => "33:PropertySpecOpt",
            State::PropertySpecS34 => "34:PropertySpec",
            State::TypeNameS35 => "35:TypeName",
            State::CLOSE_CURLYS36 => "36:CLOSE_CURLY",
            State::CLOSE_PARENS37 => "37:CLOSE_PAREN",
            State::IDENTIFIERS38 => "38:IDENTIFIER",
            State::OPEN_PARENS39 => "39:OPEN_PAREN",
            State::PropertiesS40 => "40:Properties",
            State::PropertyS41 => "41:Property",
            State::keyS42 => "42:key",
            State::LabelPropertySpecS43 => "43:LabelPropertySpec",
            State::PropertiesS44 => "44:Properties",
            State::CLOSE_CURLYS45 => "45:CLOSE_CURLY",
            State::COMMAS46 => "46:COMMA",
            State::BARS47 => "47:BAR",
            State::COLONS48 => "48:COLON",
            State::CLOSE_ARROWS49 => "49:CLOSE_ARROW",
            State::CLOSE_PARENS50 => "50:CLOSE_PAREN",
            State::PropertiesS51 => "51:Properties",
            State::PropertiesS52 => "52:Properties",
            State::INTEGER_NAMES53 => "53:INTEGER_NAME",
            State::STRING_NAMES54 => "54:STRING_NAME",
            State::DATE_NAMES55 => "55:DATE_NAME",
            State::TypeSpecS56 => "56:TypeSpec",
            State::SimpleTypeS57 => "57:SimpleType",
            State::EndpointTypeS58 => "58:EndpointType",
        };
        write!(f, "{name}")
    }
}
#[derive(Debug)]
pub enum Symbol {
    Terminal(Terminal),
    NonTerminal(NonTerminal),
}
#[allow(clippy::upper_case_acronyms)]
#[derive(Debug)]
pub enum Terminal {
    IDENTIFIER(pgs_actions::IDENTIFIER),
    SEMICOLON,
    CREATE,
    NODE,
    EDGE,
    GRAPH,
    TYPE,
    OPEN_PAREN,
    CLOSE_PAREN,
    OPEN_ARROW,
    CLOSE_ARROW,
    OPEN_CURLY,
    CLOSE_CURLY,
    COLON,
    COMMA,
    BAR,
    INTEGER_NAME,
    STRING_NAME,
    DATE_NAME,
}
#[derive(Debug)]
pub enum NonTerminal {
    Pgs(pgs_actions::Pgs),
    CreateType(pgs_actions::CreateType),
    CreateNodeType(pgs_actions::CreateNodeType),
    CreateEdgeType(pgs_actions::CreateEdgeType),
    CreateGraphType(pgs_actions::CreateGraphType),
    NodeType(pgs_actions::NodeType),
    EdgeType(pgs_actions::EdgeType),
    GraphType(pgs_actions::GraphType),
    TypeName(pgs_actions::TypeName),
    EndpointType(pgs_actions::EndpointType),
    LabelPropertySpec(pgs_actions::LabelPropertySpec),
    LabelSpecOpt(pgs_actions::LabelSpecOpt),
    PropertySpecOpt(pgs_actions::PropertySpecOpt),
    LabelSpec(pgs_actions::LabelSpec),
    PropertySpec(pgs_actions::PropertySpec),
    Properties(pgs_actions::Properties),
    Property(pgs_actions::Property),
    key(pgs_actions::key),
    TypeSpec(pgs_actions::TypeSpec),
    SimpleType(pgs_actions::SimpleType),
}
type ActionFn = fn(token: TokenKind) -> Vec<Action<State, ProdKind>>;
pub struct PgsParserDefinition {
    actions: [ActionFn; STATE_COUNT],
    gotos: [fn(nonterm: NonTermKind) -> State; STATE_COUNT],
    token_kinds: [[Option<(TokenKind, bool)>; MAX_RECOGNIZERS]; STATE_COUNT],
}
fn action_aug_s0(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::CREATE => Vec::from(&[Shift(State::CREATES1)]),
        _ => vec![],
    }
}
fn action_create_s1(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::NODE => Vec::from(&[Shift(State::NODES7)]),
        TK::EDGE => Vec::from(&[Shift(State::EDGES8)]),
        TK::GRAPH => Vec::from(&[Shift(State::GRAPHS9)]),
        _ => vec![],
    }
}
fn action_pgs_s2(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::STOP => Vec::from(&[Accept]),
        _ => vec![],
    }
}
fn action_createtype_s3(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::SEMICOLON => Vec::from(&[Shift(State::SEMICOLONS10)]),
        _ => vec![],
    }
}
fn action_createnodetype_s4(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::SEMICOLON => Vec::from(&[Reduce(PK::CreateTypeP1, 1usize)]),
        _ => vec![],
    }
}
fn action_createedgetype_s5(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::SEMICOLON => Vec::from(&[Reduce(PK::CreateTypeP2, 1usize)]),
        _ => vec![],
    }
}
fn action_creategraphtype_s6(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::SEMICOLON => Vec::from(&[Reduce(PK::CreateTypeP3, 1usize)]),
        _ => vec![],
    }
}
fn action_node_s7(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::TYPE => Vec::from(&[Shift(State::TYPES11)]),
        _ => vec![],
    }
}
fn action_edge_s8(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::TYPE => Vec::from(&[Shift(State::TYPES12)]),
        _ => vec![],
    }
}
fn action_graph_s9(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::TYPE => Vec::from(&[Shift(State::TYPES13)]),
        _ => vec![],
    }
}
fn action_semicolon_s10(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::STOP => Vec::from(&[Reduce(PK::PgsP1, 2usize)]),
        _ => vec![],
    }
}
fn action_type_s11(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::OPEN_PAREN => Vec::from(&[Shift(State::OPEN_PARENS14)]),
        _ => vec![],
    }
}
fn action_type_s12(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::OPEN_PAREN => Vec::from(&[Shift(State::OPEN_PARENS16)]),
        _ => vec![],
    }
}
fn action_type_s13(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::IDENTIFIER => Vec::from(&[Shift(State::IDENTIFIERS19)]),
        _ => vec![],
    }
}
fn action_open_paren_s14(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::IDENTIFIER => Vec::from(&[Shift(State::IDENTIFIERS19)]),
        _ => vec![],
    }
}
fn action_nodetype_s15(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::SEMICOLON => Vec::from(&[Reduce(PK::CreateNodeTypeP1, 4usize)]),
        _ => vec![],
    }
}
fn action_open_paren_s16(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::CLOSE_PAREN => Vec::from(&[Reduce(PK::LabelSpecOptP2, 0usize)]),
        TK::OPEN_CURLY => Vec::from(&[Reduce(PK::LabelSpecOptP2, 0usize)]),
        TK::COLON => Vec::from(&[Shift(State::COLONS23)]),
        _ => vec![],
    }
}
fn action_edgetype_s17(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::SEMICOLON => Vec::from(&[Reduce(PK::CreateEdgeTypeP1, 4usize)]),
        _ => vec![],
    }
}
fn action_endpointtype_s18(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::OPEN_ARROW => Vec::from(&[Shift(State::OPEN_ARROWS27)]),
        _ => vec![],
    }
}
fn action_identifier_s19(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::CLOSE_PAREN => Vec::from(&[Reduce(PK::TypeNameP1, 1usize)]),
        TK::CLOSE_ARROW => Vec::from(&[Reduce(PK::TypeNameP1, 1usize)]),
        TK::OPEN_CURLY => Vec::from(&[Reduce(PK::TypeNameP1, 1usize)]),
        TK::COLON => Vec::from(&[Reduce(PK::TypeNameP1, 1usize)]),
        _ => vec![],
    }
}
fn action_graphtype_s20(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::SEMICOLON => Vec::from(&[Reduce(PK::CreateGraphTypeP1, 4usize)]),
        _ => vec![],
    }
}
fn action_typename_s21(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::OPEN_CURLY => Vec::from(&[Shift(State::OPEN_CURLYS28)]),
        _ => vec![],
    }
}
fn action_typename_s22(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::CLOSE_PAREN => Vec::from(&[Reduce(PK::LabelSpecOptP2, 0usize)]),
        TK::OPEN_CURLY => Vec::from(&[Reduce(PK::LabelSpecOptP2, 0usize)]),
        TK::COLON => Vec::from(&[Shift(State::COLONS23)]),
        _ => vec![],
    }
}
fn action_colon_s23(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::IDENTIFIER => Vec::from(&[Shift(State::IDENTIFIERS30)]),
        _ => vec![],
    }
}
fn action_labelpropertyspec_s24(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::CLOSE_PAREN => Vec::from(&[Shift(State::CLOSE_PARENS31)]),
        _ => vec![],
    }
}
fn action_labelspecopt_s25(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::CLOSE_PAREN => Vec::from(&[Reduce(PK::PropertySpecOptP2, 0usize)]),
        TK::CLOSE_ARROW => Vec::from(&[Reduce(PK::PropertySpecOptP2, 0usize)]),
        TK::OPEN_CURLY => Vec::from(&[Shift(State::OPEN_CURLYS32)]),
        _ => vec![],
    }
}
fn action_labelspec_s26(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::CLOSE_PAREN => Vec::from(&[Reduce(PK::LabelSpecOptP1, 1usize)]),
        TK::CLOSE_ARROW => Vec::from(&[Reduce(PK::LabelSpecOptP1, 1usize)]),
        TK::OPEN_CURLY => Vec::from(&[Reduce(PK::LabelSpecOptP1, 1usize)]),
        _ => vec![],
    }
}
fn action_open_arrow_s27(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::IDENTIFIER => Vec::from(&[Shift(State::IDENTIFIERS19)]),
        _ => vec![],
    }
}
fn action_open_curly_s28(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::CLOSE_CURLY => Vec::from(&[Shift(State::CLOSE_CURLYS36)]),
        _ => vec![],
    }
}
fn action_labelpropertyspec_s29(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::CLOSE_PAREN => Vec::from(&[Shift(State::CLOSE_PARENS37)]),
        _ => vec![],
    }
}
fn action_identifier_s30(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::CLOSE_PAREN => Vec::from(&[Reduce(PK::LabelSpecP1, 2usize)]),
        TK::CLOSE_ARROW => Vec::from(&[Reduce(PK::LabelSpecP1, 2usize)]),
        TK::OPEN_CURLY => Vec::from(&[Reduce(PK::LabelSpecP1, 2usize)]),
        _ => vec![],
    }
}
fn action_close_paren_s31(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::SEMICOLON => Vec::from(&[Reduce(PK::EndpointTypeP1, 3usize)]),
        TK::OPEN_ARROW => Vec::from(&[Reduce(PK::EndpointTypeP1, 3usize)]),
        _ => vec![],
    }
}
fn action_open_curly_s32(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::IDENTIFIER => Vec::from(&[Shift(State::IDENTIFIERS38)]),
        TK::OPEN_PAREN => Vec::from(&[Shift(State::OPEN_PARENS39)]),
        _ => vec![],
    }
}
fn action_propertyspecopt_s33(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::CLOSE_PAREN => Vec::from(&[Reduce(PK::LabelPropertySpecP1, 2usize)]),
        TK::CLOSE_ARROW => Vec::from(&[Reduce(PK::LabelPropertySpecP1, 2usize)]),
        _ => vec![],
    }
}
fn action_propertyspec_s34(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::CLOSE_PAREN => Vec::from(&[Reduce(PK::PropertySpecOptP1, 1usize)]),
        TK::CLOSE_ARROW => Vec::from(&[Reduce(PK::PropertySpecOptP1, 1usize)]),
        _ => vec![],
    }
}
fn action_typename_s35(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::CLOSE_ARROW => Vec::from(&[Reduce(PK::LabelSpecOptP2, 0usize)]),
        TK::OPEN_CURLY => Vec::from(&[Reduce(PK::LabelSpecOptP2, 0usize)]),
        TK::COLON => Vec::from(&[Shift(State::COLONS23)]),
        _ => vec![],
    }
}
fn action_close_curly_s36(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::SEMICOLON => Vec::from(&[Reduce(PK::GraphTypeP1, 3usize)]),
        _ => vec![],
    }
}
fn action_close_paren_s37(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::SEMICOLON => Vec::from(&[Reduce(PK::NodeTypeP1, 4usize)]),
        _ => vec![],
    }
}
fn action_identifier_s38(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::COLON => Vec::from(&[Reduce(PK::keyP1, 1usize)]),
        _ => vec![],
    }
}
fn action_open_paren_s39(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::IDENTIFIER => Vec::from(&[Shift(State::IDENTIFIERS38)]),
        TK::OPEN_PAREN => Vec::from(&[Shift(State::OPEN_PARENS39)]),
        _ => vec![],
    }
}
fn action_properties_s40(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::CLOSE_CURLY => Vec::from(&[Shift(State::CLOSE_CURLYS45)]),
        TK::COMMA => Vec::from(&[Shift(State::COMMAS46)]),
        TK::BAR => Vec::from(&[Shift(State::BARS47)]),
        _ => vec![],
    }
}
fn action_property_s41(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::CLOSE_PAREN => Vec::from(&[Reduce(PK::PropertiesP4, 1usize)]),
        TK::CLOSE_CURLY => Vec::from(&[Reduce(PK::PropertiesP4, 1usize)]),
        TK::COMMA => Vec::from(&[Reduce(PK::PropertiesP4, 1usize)]),
        TK::BAR => Vec::from(&[Reduce(PK::PropertiesP4, 1usize)]),
        _ => vec![],
    }
}
fn action_key_s42(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::COLON => Vec::from(&[Shift(State::COLONS48)]),
        _ => vec![],
    }
}
fn action_labelpropertyspec_s43(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::CLOSE_ARROW => Vec::from(&[Shift(State::CLOSE_ARROWS49)]),
        _ => vec![],
    }
}
fn action_properties_s44(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::CLOSE_PAREN => Vec::from(&[Shift(State::CLOSE_PARENS50)]),
        TK::COMMA => Vec::from(&[Shift(State::COMMAS46)]),
        TK::BAR => Vec::from(&[Shift(State::BARS47)]),
        _ => vec![],
    }
}
fn action_close_curly_s45(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::CLOSE_PAREN => Vec::from(&[Reduce(PK::PropertySpecP1, 3usize)]),
        TK::CLOSE_ARROW => Vec::from(&[Reduce(PK::PropertySpecP1, 3usize)]),
        _ => vec![],
    }
}
fn action_comma_s46(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::IDENTIFIER => Vec::from(&[Shift(State::IDENTIFIERS38)]),
        TK::OPEN_PAREN => Vec::from(&[Shift(State::OPEN_PARENS39)]),
        _ => vec![],
    }
}
fn action_bar_s47(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::IDENTIFIER => Vec::from(&[Shift(State::IDENTIFIERS38)]),
        TK::OPEN_PAREN => Vec::from(&[Shift(State::OPEN_PARENS39)]),
        _ => vec![],
    }
}
fn action_colon_s48(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::INTEGER_NAME => Vec::from(&[Shift(State::INTEGER_NAMES53)]),
        TK::STRING_NAME => Vec::from(&[Shift(State::STRING_NAMES54)]),
        TK::DATE_NAME => Vec::from(&[Shift(State::DATE_NAMES55)]),
        _ => vec![],
    }
}
fn action_close_arrow_s49(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::OPEN_PAREN => Vec::from(&[Shift(State::OPEN_PARENS16)]),
        _ => vec![],
    }
}
fn action_close_paren_s50(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::CLOSE_PAREN => Vec::from(&[Reduce(PK::PropertiesParen, 3usize)]),
        TK::CLOSE_CURLY => Vec::from(&[Reduce(PK::PropertiesParen, 3usize)]),
        TK::COMMA => Vec::from(&[Reduce(PK::PropertiesParen, 3usize)]),
        TK::BAR => Vec::from(&[Reduce(PK::PropertiesParen, 3usize)]),
        _ => vec![],
    }
}
fn action_properties_s51(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::CLOSE_PAREN => Vec::from(&[Reduce(PK::PropertiesEachOf, 3usize)]),
        TK::CLOSE_CURLY => Vec::from(&[Reduce(PK::PropertiesEachOf, 3usize)]),
        TK::COMMA => Vec::from(&[Reduce(PK::PropertiesEachOf, 3usize)]),
        TK::BAR => Vec::from(&[Shift(State::BARS47)]),
        _ => vec![],
    }
}
fn action_properties_s52(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::CLOSE_PAREN => Vec::from(&[Reduce(PK::PropertiesOneOf, 3usize)]),
        TK::CLOSE_CURLY => Vec::from(&[Reduce(PK::PropertiesOneOf, 3usize)]),
        TK::COMMA => Vec::from(&[Reduce(PK::PropertiesOneOf, 3usize)]),
        TK::BAR => Vec::from(&[Reduce(PK::PropertiesOneOf, 3usize)]),
        _ => vec![],
    }
}
fn action_integer_name_s53(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::CLOSE_PAREN => Vec::from(&[Reduce(PK::SimpleTypeP2, 1usize)]),
        TK::CLOSE_CURLY => Vec::from(&[Reduce(PK::SimpleTypeP2, 1usize)]),
        TK::COMMA => Vec::from(&[Reduce(PK::SimpleTypeP2, 1usize)]),
        TK::BAR => Vec::from(&[Reduce(PK::SimpleTypeP2, 1usize)]),
        _ => vec![],
    }
}
fn action_string_name_s54(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::CLOSE_PAREN => Vec::from(&[Reduce(PK::SimpleTypeP1, 1usize)]),
        TK::CLOSE_CURLY => Vec::from(&[Reduce(PK::SimpleTypeP1, 1usize)]),
        TK::COMMA => Vec::from(&[Reduce(PK::SimpleTypeP1, 1usize)]),
        TK::BAR => Vec::from(&[Reduce(PK::SimpleTypeP1, 1usize)]),
        _ => vec![],
    }
}
fn action_date_name_s55(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::CLOSE_PAREN => Vec::from(&[Reduce(PK::SimpleTypeP3, 1usize)]),
        TK::CLOSE_CURLY => Vec::from(&[Reduce(PK::SimpleTypeP3, 1usize)]),
        TK::COMMA => Vec::from(&[Reduce(PK::SimpleTypeP3, 1usize)]),
        TK::BAR => Vec::from(&[Reduce(PK::SimpleTypeP3, 1usize)]),
        _ => vec![],
    }
}
fn action_typespec_s56(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::CLOSE_PAREN => Vec::from(&[Reduce(PK::PropertyP1, 3usize)]),
        TK::CLOSE_CURLY => Vec::from(&[Reduce(PK::PropertyP1, 3usize)]),
        TK::COMMA => Vec::from(&[Reduce(PK::PropertyP1, 3usize)]),
        TK::BAR => Vec::from(&[Reduce(PK::PropertyP1, 3usize)]),
        _ => vec![],
    }
}
fn action_simpletype_s57(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::CLOSE_PAREN => Vec::from(&[Reduce(PK::TypeSpecP1, 1usize)]),
        TK::CLOSE_CURLY => Vec::from(&[Reduce(PK::TypeSpecP1, 1usize)]),
        TK::COMMA => Vec::from(&[Reduce(PK::TypeSpecP1, 1usize)]),
        TK::BAR => Vec::from(&[Reduce(PK::TypeSpecP1, 1usize)]),
        _ => vec![],
    }
}
fn action_endpointtype_s58(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::SEMICOLON => Vec::from(&[Reduce(PK::EdgeTypeP1, 6usize)]),
        _ => vec![],
    }
}
fn goto_aug_s0(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::Pgs => State::PgsS2,
        NonTermKind::CreateType => State::CreateTypeS3,
        NonTermKind::CreateNodeType => State::CreateNodeTypeS4,
        NonTermKind::CreateEdgeType => State::CreateEdgeTypeS5,
        NonTermKind::CreateGraphType => State::CreateGraphTypeS6,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::AUGS0
            )
        }
    }
}
fn goto_type_s11(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::NodeType => State::NodeTypeS15,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::TYPES11
            )
        }
    }
}
fn goto_type_s12(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::EdgeType => State::EdgeTypeS17,
        NonTermKind::EndpointType => State::EndpointTypeS18,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::TYPES12
            )
        }
    }
}
fn goto_type_s13(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::GraphType => State::GraphTypeS20,
        NonTermKind::TypeName => State::TypeNameS21,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::TYPES13
            )
        }
    }
}
fn goto_open_paren_s14(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::TypeName => State::TypeNameS22,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::OPEN_PARENS14
            )
        }
    }
}
fn goto_open_paren_s16(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::LabelPropertySpec => State::LabelPropertySpecS24,
        NonTermKind::LabelSpecOpt => State::LabelSpecOptS25,
        NonTermKind::LabelSpec => State::LabelSpecS26,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::OPEN_PARENS16
            )
        }
    }
}
fn goto_typename_s22(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::LabelPropertySpec => State::LabelPropertySpecS29,
        NonTermKind::LabelSpecOpt => State::LabelSpecOptS25,
        NonTermKind::LabelSpec => State::LabelSpecS26,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::TypeNameS22
            )
        }
    }
}
fn goto_labelspecopt_s25(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::PropertySpecOpt => State::PropertySpecOptS33,
        NonTermKind::PropertySpec => State::PropertySpecS34,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::LabelSpecOptS25
            )
        }
    }
}
fn goto_open_arrow_s27(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::TypeName => State::TypeNameS35,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::OPEN_ARROWS27
            )
        }
    }
}
fn goto_open_curly_s32(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::Properties => State::PropertiesS40,
        NonTermKind::Property => State::PropertyS41,
        NonTermKind::key => State::keyS42,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::OPEN_CURLYS32
            )
        }
    }
}
fn goto_typename_s35(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::LabelPropertySpec => State::LabelPropertySpecS43,
        NonTermKind::LabelSpecOpt => State::LabelSpecOptS25,
        NonTermKind::LabelSpec => State::LabelSpecS26,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::TypeNameS35
            )
        }
    }
}
fn goto_open_paren_s39(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::Properties => State::PropertiesS44,
        NonTermKind::Property => State::PropertyS41,
        NonTermKind::key => State::keyS42,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::OPEN_PARENS39
            )
        }
    }
}
fn goto_comma_s46(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::Properties => State::PropertiesS51,
        NonTermKind::Property => State::PropertyS41,
        NonTermKind::key => State::keyS42,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::COMMAS46
            )
        }
    }
}
fn goto_bar_s47(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::Properties => State::PropertiesS52,
        NonTermKind::Property => State::PropertyS41,
        NonTermKind::key => State::keyS42,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::BARS47
            )
        }
    }
}
fn goto_colon_s48(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::TypeSpec => State::TypeSpecS56,
        NonTermKind::SimpleType => State::SimpleTypeS57,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::COLONS48
            )
        }
    }
}
fn goto_close_arrow_s49(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::EndpointType => State::EndpointTypeS58,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::CLOSE_ARROWS49
            )
        }
    }
}
fn goto_invalid(_nonterm_kind: NonTermKind) -> State {
    panic!("Invalid GOTO entry!");
}
pub(crate) static PARSER_DEFINITION: PgsParserDefinition = PgsParserDefinition {
    actions: [
        action_aug_s0,
        action_create_s1,
        action_pgs_s2,
        action_createtype_s3,
        action_createnodetype_s4,
        action_createedgetype_s5,
        action_creategraphtype_s6,
        action_node_s7,
        action_edge_s8,
        action_graph_s9,
        action_semicolon_s10,
        action_type_s11,
        action_type_s12,
        action_type_s13,
        action_open_paren_s14,
        action_nodetype_s15,
        action_open_paren_s16,
        action_edgetype_s17,
        action_endpointtype_s18,
        action_identifier_s19,
        action_graphtype_s20,
        action_typename_s21,
        action_typename_s22,
        action_colon_s23,
        action_labelpropertyspec_s24,
        action_labelspecopt_s25,
        action_labelspec_s26,
        action_open_arrow_s27,
        action_open_curly_s28,
        action_labelpropertyspec_s29,
        action_identifier_s30,
        action_close_paren_s31,
        action_open_curly_s32,
        action_propertyspecopt_s33,
        action_propertyspec_s34,
        action_typename_s35,
        action_close_curly_s36,
        action_close_paren_s37,
        action_identifier_s38,
        action_open_paren_s39,
        action_properties_s40,
        action_property_s41,
        action_key_s42,
        action_labelpropertyspec_s43,
        action_properties_s44,
        action_close_curly_s45,
        action_comma_s46,
        action_bar_s47,
        action_colon_s48,
        action_close_arrow_s49,
        action_close_paren_s50,
        action_properties_s51,
        action_properties_s52,
        action_integer_name_s53,
        action_string_name_s54,
        action_date_name_s55,
        action_typespec_s56,
        action_simpletype_s57,
        action_endpointtype_s58,
    ],
    gotos: [
        goto_aug_s0,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_type_s11,
        goto_type_s12,
        goto_type_s13,
        goto_open_paren_s14,
        goto_invalid,
        goto_open_paren_s16,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_typename_s22,
        goto_invalid,
        goto_invalid,
        goto_labelspecopt_s25,
        goto_invalid,
        goto_open_arrow_s27,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_open_curly_s32,
        goto_invalid,
        goto_invalid,
        goto_typename_s35,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_open_paren_s39,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_comma_s46,
        goto_bar_s47,
        goto_colon_s48,
        goto_close_arrow_s49,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
    ],
    token_kinds: [
        [Some((TK::CREATE, true)), None, None, None],
        [Some((TK::GRAPH, true)), Some((TK::NODE, true)), Some((TK::EDGE, true)), None],
        [Some((TK::STOP, false)), None, None, None],
        [Some((TK::SEMICOLON, true)), None, None, None],
        [Some((TK::SEMICOLON, true)), None, None, None],
        [Some((TK::SEMICOLON, true)), None, None, None],
        [Some((TK::SEMICOLON, true)), None, None, None],
        [Some((TK::TYPE, true)), None, None, None],
        [Some((TK::TYPE, true)), None, None, None],
        [Some((TK::TYPE, true)), None, None, None],
        [Some((TK::STOP, false)), None, None, None],
        [Some((TK::OPEN_PAREN, true)), None, None, None],
        [Some((TK::OPEN_PAREN, true)), None, None, None],
        [Some((TK::IDENTIFIER, false)), None, None, None],
        [Some((TK::IDENTIFIER, false)), None, None, None],
        [Some((TK::SEMICOLON, true)), None, None, None],
        [
            Some((TK::CLOSE_PAREN, true)),
            Some((TK::OPEN_CURLY, true)),
            Some((TK::COLON, true)),
            None,
        ],
        [Some((TK::SEMICOLON, true)), None, None, None],
        [Some((TK::OPEN_ARROW, true)), None, None, None],
        [
            Some((TK::CLOSE_ARROW, true)),
            Some((TK::CLOSE_PAREN, true)),
            Some((TK::OPEN_CURLY, true)),
            Some((TK::COLON, true)),
        ],
        [Some((TK::SEMICOLON, true)), None, None, None],
        [Some((TK::OPEN_CURLY, true)), None, None, None],
        [
            Some((TK::CLOSE_PAREN, true)),
            Some((TK::OPEN_CURLY, true)),
            Some((TK::COLON, true)),
            None,
        ],
        [Some((TK::IDENTIFIER, false)), None, None, None],
        [Some((TK::CLOSE_PAREN, true)), None, None, None],
        [
            Some((TK::CLOSE_ARROW, true)),
            Some((TK::CLOSE_PAREN, true)),
            Some((TK::OPEN_CURLY, true)),
            None,
        ],
        [
            Some((TK::CLOSE_ARROW, true)),
            Some((TK::CLOSE_PAREN, true)),
            Some((TK::OPEN_CURLY, true)),
            None,
        ],
        [Some((TK::IDENTIFIER, false)), None, None, None],
        [Some((TK::CLOSE_CURLY, true)), None, None, None],
        [Some((TK::CLOSE_PAREN, true)), None, None, None],
        [
            Some((TK::CLOSE_ARROW, true)),
            Some((TK::CLOSE_PAREN, true)),
            Some((TK::OPEN_CURLY, true)),
            None,
        ],
        [Some((TK::OPEN_ARROW, true)), Some((TK::SEMICOLON, true)), None, None],
        [Some((TK::OPEN_PAREN, true)), Some((TK::IDENTIFIER, false)), None, None],
        [Some((TK::CLOSE_ARROW, true)), Some((TK::CLOSE_PAREN, true)), None, None],
        [Some((TK::CLOSE_ARROW, true)), Some((TK::CLOSE_PAREN, true)), None, None],
        [
            Some((TK::CLOSE_ARROW, true)),
            Some((TK::OPEN_CURLY, true)),
            Some((TK::COLON, true)),
            None,
        ],
        [Some((TK::SEMICOLON, true)), None, None, None],
        [Some((TK::SEMICOLON, true)), None, None, None],
        [Some((TK::COLON, true)), None, None, None],
        [Some((TK::OPEN_PAREN, true)), Some((TK::IDENTIFIER, false)), None, None],
        [
            Some((TK::CLOSE_CURLY, true)),
            Some((TK::COMMA, true)),
            Some((TK::BAR, true)),
            None,
        ],
        [
            Some((TK::CLOSE_PAREN, true)),
            Some((TK::CLOSE_CURLY, true)),
            Some((TK::COMMA, true)),
            Some((TK::BAR, true)),
        ],
        [Some((TK::COLON, true)), None, None, None],
        [Some((TK::CLOSE_ARROW, true)), None, None, None],
        [
            Some((TK::CLOSE_PAREN, true)),
            Some((TK::COMMA, true)),
            Some((TK::BAR, true)),
            None,
        ],
        [Some((TK::CLOSE_ARROW, true)), Some((TK::CLOSE_PAREN, true)), None, None],
        [Some((TK::OPEN_PAREN, true)), Some((TK::IDENTIFIER, false)), None, None],
        [Some((TK::OPEN_PAREN, true)), Some((TK::IDENTIFIER, false)), None, None],
        [
            Some((TK::INTEGER_NAME, true)),
            Some((TK::STRING_NAME, true)),
            Some((TK::DATE_NAME, true)),
            None,
        ],
        [Some((TK::OPEN_PAREN, true)), None, None, None],
        [
            Some((TK::CLOSE_PAREN, true)),
            Some((TK::CLOSE_CURLY, true)),
            Some((TK::COMMA, true)),
            Some((TK::BAR, true)),
        ],
        [
            Some((TK::CLOSE_PAREN, true)),
            Some((TK::CLOSE_CURLY, true)),
            Some((TK::COMMA, true)),
            Some((TK::BAR, true)),
        ],
        [
            Some((TK::CLOSE_PAREN, true)),
            Some((TK::CLOSE_CURLY, true)),
            Some((TK::COMMA, true)),
            Some((TK::BAR, true)),
        ],
        [
            Some((TK::CLOSE_PAREN, true)),
            Some((TK::CLOSE_CURLY, true)),
            Some((TK::COMMA, true)),
            Some((TK::BAR, true)),
        ],
        [
            Some((TK::CLOSE_PAREN, true)),
            Some((TK::CLOSE_CURLY, true)),
            Some((TK::COMMA, true)),
            Some((TK::BAR, true)),
        ],
        [
            Some((TK::CLOSE_PAREN, true)),
            Some((TK::CLOSE_CURLY, true)),
            Some((TK::COMMA, true)),
            Some((TK::BAR, true)),
        ],
        [
            Some((TK::CLOSE_PAREN, true)),
            Some((TK::CLOSE_CURLY, true)),
            Some((TK::COMMA, true)),
            Some((TK::BAR, true)),
        ],
        [
            Some((TK::CLOSE_PAREN, true)),
            Some((TK::CLOSE_CURLY, true)),
            Some((TK::COMMA, true)),
            Some((TK::BAR, true)),
        ],
        [Some((TK::SEMICOLON, true)), None, None, None],
    ],
};
impl ParserDefinition<State, ProdKind, TokenKind, NonTermKind> for PgsParserDefinition {
    fn actions(&self, state: State, token: TokenKind) -> Vec<Action<State, ProdKind>> {
        PARSER_DEFINITION.actions[state as usize](token)
    }
    fn goto(&self, state: State, nonterm: NonTermKind) -> State {
        PARSER_DEFINITION.gotos[state as usize](nonterm)
    }
    fn expected_token_kinds(&self, state: State) -> Vec<(TokenKind, bool)> {
        PARSER_DEFINITION.token_kinds[state as usize].iter().map_while(|t| *t).collect()
    }
    fn longest_match() -> bool {
        true
    }
    fn grammar_order() -> bool {
        true
    }
}
pub(crate) type Context<'i, I> = LRContext<'i, I, State, TokenKind>;
pub struct PgsParser<
    'i,
    I: InputT + ?Sized,
    L: Lexer<'i, Context<'i, I>, State, TokenKind, Input = I>,
    B,
>(
    LRParser<
        'i,
        Context<'i, I>,
        State,
        ProdKind,
        TokenKind,
        NonTermKind,
        PgsParserDefinition,
        L,
        B,
        I,
    >,
);
#[allow(dead_code)]
impl<
    'i,
> PgsParser<
    'i,
    Input,
    StringLexer<Context<'i, Input>, State, TokenKind, TokenRecognizer, TERMINAL_COUNT>,
    DefaultBuilder,
> {
    pub fn new() -> Self {
        Self(
            LRParser::new(
                &PARSER_DEFINITION,
                State::default(),
                false,
                false,
                StringLexer::new(true, &RECOGNIZERS),
                DefaultBuilder::new(),
            ),
        )
    }
}
#[allow(dead_code)]
impl<'i, I, L, B> Parser<'i, I, Context<'i, I>, State, TokenKind>
for PgsParser<'i, I, L, B>
where
    I: InputT + ?Sized + Debug,
    L: Lexer<'i, Context<'i, I>, State, TokenKind, Input = I>,
    B: LRBuilder<'i, I, Context<'i, I>, State, ProdKind, TokenKind>,
{
    type Output = B::Output;
    fn parse(&self, input: &'i I) -> Result<Self::Output> {
        self.0.parse(input)
    }
    fn parse_with_context(
        &self,
        context: &mut Context<'i, I>,
        input: &'i I,
    ) -> Result<Self::Output> {
        self.0.parse_with_context(context, input)
    }
    fn parse_file<'a, F: AsRef<std::path::Path>>(
        &'a mut self,
        file: F,
    ) -> Result<Self::Output>
    where
        'a: 'i,
    {
        self.0.parse_file(file)
    }
}
#[allow(dead_code)]
#[derive(Debug)]
pub enum Recognizer {
    Stop,
    StrMatch(&'static str),
    RegexMatch(Lazy<Regex>),
}
#[allow(dead_code)]
#[derive(Debug)]
pub struct TokenRecognizer(TokenKind, Recognizer);
impl<'i> TokenRecognizerT<'i> for TokenRecognizer {
    fn recognize(&self, input: &'i str) -> Option<&'i str> {
        match &self {
            #[allow(unused_variables)]
            TokenRecognizer(token_kind, Recognizer::StrMatch(s)) => {
                logn!("{} {:?} -- ", "    Recognizing".green(), token_kind);
                if input.starts_with(s) {
                    log!("{}", "recognized".bold().green());
                    Some(s)
                } else {
                    log!("{}", "not recognized".red());
                    None
                }
            }
            #[allow(unused_variables)]
            TokenRecognizer(token_kind, Recognizer::RegexMatch(r)) => {
                logn!("{} {:?} -- ", "    Recognizing".green(), token_kind);
                let match_str = r.find(input);
                match match_str {
                    Some(x) => {
                        let x_str = x.as_str();
                        log!("{} '{}'", "recognized".bold().green(), x_str);
                        Some(x_str)
                    }
                    _ => {
                        log!("{}", "not recognized".red());
                        None
                    }
                }
            }
            TokenRecognizer(_, Recognizer::Stop) => {
                logn!("{} STOP -- ", "    Recognizing".green());
                if input.is_empty() {
                    log!("{}", "recognized".bold().green());
                    Some("")
                } else {
                    log!("{}", "not recognized".red());
                    None
                }
            }
        }
    }
}
pub(crate) static RECOGNIZERS: [TokenRecognizer; TERMINAL_COUNT] = [
    TokenRecognizer(TokenKind::STOP, Recognizer::Stop),
    TokenRecognizer(
        TokenKind::IDENTIFIER,
        Recognizer::RegexMatch(
            Lazy::new(|| { Regex::new(concat!("^", "\\w+")).unwrap() }),
        ),
    ),
    TokenRecognizer(TokenKind::SEMICOLON, Recognizer::StrMatch(";")),
    TokenRecognizer(TokenKind::CREATE, Recognizer::StrMatch("CREATE")),
    TokenRecognizer(TokenKind::NODE, Recognizer::StrMatch("NODE")),
    TokenRecognizer(TokenKind::EDGE, Recognizer::StrMatch("EDGE")),
    TokenRecognizer(TokenKind::GRAPH, Recognizer::StrMatch("GRAPH")),
    TokenRecognizer(TokenKind::TYPE, Recognizer::StrMatch("TYPE")),
    TokenRecognizer(TokenKind::OPEN_PAREN, Recognizer::StrMatch("(")),
    TokenRecognizer(TokenKind::CLOSE_PAREN, Recognizer::StrMatch(")")),
    TokenRecognizer(TokenKind::OPEN_ARROW, Recognizer::StrMatch("-[")),
    TokenRecognizer(TokenKind::CLOSE_ARROW, Recognizer::StrMatch("]->")),
    TokenRecognizer(TokenKind::OPEN_CURLY, Recognizer::StrMatch("{")),
    TokenRecognizer(TokenKind::CLOSE_CURLY, Recognizer::StrMatch("}")),
    TokenRecognizer(TokenKind::COLON, Recognizer::StrMatch(":")),
    TokenRecognizer(TokenKind::COMMA, Recognizer::StrMatch(",")),
    TokenRecognizer(TokenKind::BAR, Recognizer::StrMatch("|")),
    TokenRecognizer(TokenKind::INTEGER_NAME, Recognizer::StrMatch("INTEGER")),
    TokenRecognizer(TokenKind::STRING_NAME, Recognizer::StrMatch("STRING")),
    TokenRecognizer(TokenKind::DATE_NAME, Recognizer::StrMatch("DATE")),
];
pub struct DefaultBuilder {
    res_stack: Vec<Symbol>,
}
impl DefaultBuilder {
    #[allow(dead_code)]
    pub fn new() -> Self {
        Self { res_stack: vec![] }
    }
}
impl Builder for DefaultBuilder {
    type Output = pgs_actions::Pgs;
    fn get_result(&mut self) -> Self::Output {
        match self.res_stack.pop().unwrap() {
            Symbol::NonTerminal(NonTerminal::Pgs(r)) => r,
            _ => panic!("Invalid result on the parse stack!"),
        }
    }
}
impl<'i> LRBuilder<'i, Input, Context<'i, Input>, State, ProdKind, TokenKind>
for DefaultBuilder {
    #![allow(unused_variables)]
    fn shift_action(
        &mut self,
        context: &Context<'i, Input>,
        token: Token<'i, Input, TokenKind>,
    ) {
        let val = match token.kind {
            TokenKind::STOP => panic!("Cannot shift STOP token!"),
            TokenKind::IDENTIFIER => {
                Terminal::IDENTIFIER(pgs_actions::identifier(context, token))
            }
            TokenKind::SEMICOLON => Terminal::SEMICOLON,
            TokenKind::CREATE => Terminal::CREATE,
            TokenKind::NODE => Terminal::NODE,
            TokenKind::EDGE => Terminal::EDGE,
            TokenKind::GRAPH => Terminal::GRAPH,
            TokenKind::TYPE => Terminal::TYPE,
            TokenKind::OPEN_PAREN => Terminal::OPEN_PAREN,
            TokenKind::CLOSE_PAREN => Terminal::CLOSE_PAREN,
            TokenKind::OPEN_ARROW => Terminal::OPEN_ARROW,
            TokenKind::CLOSE_ARROW => Terminal::CLOSE_ARROW,
            TokenKind::OPEN_CURLY => Terminal::OPEN_CURLY,
            TokenKind::CLOSE_CURLY => Terminal::CLOSE_CURLY,
            TokenKind::COLON => Terminal::COLON,
            TokenKind::COMMA => Terminal::COMMA,
            TokenKind::BAR => Terminal::BAR,
            TokenKind::INTEGER_NAME => Terminal::INTEGER_NAME,
            TokenKind::STRING_NAME => Terminal::STRING_NAME,
            TokenKind::DATE_NAME => Terminal::DATE_NAME,
        };
        self.res_stack.push(Symbol::Terminal(val));
    }
    fn reduce_action(
        &mut self,
        context: &Context<'i, Input>,
        prod: ProdKind,
        prod_len: usize,
    ) {
        let prod = match prod {
            ProdKind::PgsP1 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 2usize)
                    .into_iter();
                match (i.next().unwrap(), i.next().unwrap()) {
                    (Symbol::NonTerminal(NonTerminal::CreateType(p0)), _) => {
                        NonTerminal::Pgs(pgs_actions::pgs_create_type(context, p0))
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::CreateTypeP1 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 1usize)
                    .into_iter();
                match i.next().unwrap() {
                    Symbol::NonTerminal(NonTerminal::CreateNodeType(p0)) => {
                        NonTerminal::CreateType(
                            pgs_actions::create_type_create_node_type(context, p0),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::CreateTypeP2 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 1usize)
                    .into_iter();
                match i.next().unwrap() {
                    Symbol::NonTerminal(NonTerminal::CreateEdgeType(p0)) => {
                        NonTerminal::CreateType(
                            pgs_actions::create_type_create_edge_type(context, p0),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::CreateTypeP3 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 1usize)
                    .into_iter();
                match i.next().unwrap() {
                    Symbol::NonTerminal(NonTerminal::CreateGraphType(p0)) => {
                        NonTerminal::CreateType(
                            pgs_actions::create_type_create_graph_type(context, p0),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::CreateNodeTypeP1 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 4usize)
                    .into_iter();
                match (
                    i.next().unwrap(),
                    i.next().unwrap(),
                    i.next().unwrap(),
                    i.next().unwrap(),
                ) {
                    (_, _, _, Symbol::NonTerminal(NonTerminal::NodeType(p0))) => {
                        NonTerminal::CreateNodeType(
                            pgs_actions::create_node_type_node_type(context, p0),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::CreateEdgeTypeP1 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 4usize)
                    .into_iter();
                match (
                    i.next().unwrap(),
                    i.next().unwrap(),
                    i.next().unwrap(),
                    i.next().unwrap(),
                ) {
                    (_, _, _, Symbol::NonTerminal(NonTerminal::EdgeType(p0))) => {
                        NonTerminal::CreateEdgeType(
                            pgs_actions::create_edge_type_edge_type(context, p0),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::CreateGraphTypeP1 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 4usize)
                    .into_iter();
                match (
                    i.next().unwrap(),
                    i.next().unwrap(),
                    i.next().unwrap(),
                    i.next().unwrap(),
                ) {
                    (_, _, _, Symbol::NonTerminal(NonTerminal::GraphType(p0))) => {
                        NonTerminal::CreateGraphType(
                            pgs_actions::create_graph_type_graph_type(context, p0),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::NodeTypeP1 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 4usize)
                    .into_iter();
                match (
                    i.next().unwrap(),
                    i.next().unwrap(),
                    i.next().unwrap(),
                    i.next().unwrap(),
                ) {
                    (
                        _,
                        Symbol::NonTerminal(NonTerminal::TypeName(p0)),
                        Symbol::NonTerminal(NonTerminal::LabelPropertySpec(p1)),
                        _,
                    ) => {
                        NonTerminal::NodeType(pgs_actions::node_type_c1(context, p0, p1))
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::EdgeTypeP1 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 6usize)
                    .into_iter();
                match (
                    i.next().unwrap(),
                    i.next().unwrap(),
                    i.next().unwrap(),
                    i.next().unwrap(),
                    i.next().unwrap(),
                    i.next().unwrap(),
                ) {
                    (
                        Symbol::NonTerminal(NonTerminal::EndpointType(p0)),
                        _,
                        Symbol::NonTerminal(NonTerminal::TypeName(p1)),
                        Symbol::NonTerminal(NonTerminal::LabelPropertySpec(p2)),
                        _,
                        Symbol::NonTerminal(NonTerminal::EndpointType(p3)),
                    ) => {
                        NonTerminal::EdgeType(
                            pgs_actions::edge_type_c1(context, p0, p1, p2, p3),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::GraphTypeP1 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 3usize)
                    .into_iter();
                match (i.next().unwrap(), i.next().unwrap(), i.next().unwrap()) {
                    (Symbol::NonTerminal(NonTerminal::TypeName(p0)), _, _) => {
                        NonTerminal::GraphType(
                            pgs_actions::graph_type_type_name(context, p0),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::TypeNameP1 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 1usize)
                    .into_iter();
                match i.next().unwrap() {
                    Symbol::Terminal(Terminal::IDENTIFIER(p0)) => {
                        NonTerminal::TypeName(
                            pgs_actions::type_name_identifier(context, p0),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::EndpointTypeP1 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 3usize)
                    .into_iter();
                match (i.next().unwrap(), i.next().unwrap(), i.next().unwrap()) {
                    (_, Symbol::NonTerminal(NonTerminal::LabelPropertySpec(p0)), _) => {
                        NonTerminal::EndpointType(
                            pgs_actions::endpoint_type_label_property_spec(context, p0),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::LabelPropertySpecP1 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 2usize)
                    .into_iter();
                match (i.next().unwrap(), i.next().unwrap()) {
                    (
                        Symbol::NonTerminal(NonTerminal::LabelSpecOpt(p0)),
                        Symbol::NonTerminal(NonTerminal::PropertySpecOpt(p1)),
                    ) => {
                        NonTerminal::LabelPropertySpec(
                            pgs_actions::label_property_spec_c1(context, p0, p1),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::LabelSpecOptP1 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 1usize)
                    .into_iter();
                match i.next().unwrap() {
                    Symbol::NonTerminal(NonTerminal::LabelSpec(p0)) => {
                        NonTerminal::LabelSpecOpt(
                            pgs_actions::label_spec_opt_label_spec(context, p0),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::LabelSpecOptP2 => {
                NonTerminal::LabelSpecOpt(pgs_actions::label_spec_opt_empty(context))
            }
            ProdKind::PropertySpecOptP1 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 1usize)
                    .into_iter();
                match i.next().unwrap() {
                    Symbol::NonTerminal(NonTerminal::PropertySpec(p0)) => {
                        NonTerminal::PropertySpecOpt(
                            pgs_actions::property_spec_opt_property_spec(context, p0),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::PropertySpecOptP2 => {
                NonTerminal::PropertySpecOpt(
                    pgs_actions::property_spec_opt_empty(context),
                )
            }
            ProdKind::LabelSpecP1 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 2usize)
                    .into_iter();
                match (i.next().unwrap(), i.next().unwrap()) {
                    (_, Symbol::Terminal(Terminal::IDENTIFIER(p0))) => {
                        NonTerminal::LabelSpec(
                            pgs_actions::label_spec_identifier(context, p0),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::PropertySpecP1 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 3usize)
                    .into_iter();
                match (i.next().unwrap(), i.next().unwrap(), i.next().unwrap()) {
                    (_, Symbol::NonTerminal(NonTerminal::Properties(p0)), _) => {
                        NonTerminal::PropertySpec(
                            pgs_actions::property_spec_properties(context, p0),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::PropertiesEachOf => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 3usize)
                    .into_iter();
                match (i.next().unwrap(), i.next().unwrap(), i.next().unwrap()) {
                    (
                        Symbol::NonTerminal(NonTerminal::Properties(p0)),
                        _,
                        Symbol::NonTerminal(NonTerminal::Properties(p1)),
                    ) => {
                        NonTerminal::Properties(
                            pgs_actions::properties_each_of(context, p0, p1),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::PropertiesOneOf => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 3usize)
                    .into_iter();
                match (i.next().unwrap(), i.next().unwrap(), i.next().unwrap()) {
                    (
                        Symbol::NonTerminal(NonTerminal::Properties(p0)),
                        _,
                        Symbol::NonTerminal(NonTerminal::Properties(p1)),
                    ) => {
                        NonTerminal::Properties(
                            pgs_actions::properties_one_of(context, p0, p1),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::PropertiesParen => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 3usize)
                    .into_iter();
                match (i.next().unwrap(), i.next().unwrap(), i.next().unwrap()) {
                    (_, Symbol::NonTerminal(NonTerminal::Properties(p0)), _) => {
                        NonTerminal::Properties(
                            pgs_actions::properties_paren(context, p0),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::PropertiesP4 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 1usize)
                    .into_iter();
                match i.next().unwrap() {
                    Symbol::NonTerminal(NonTerminal::Property(p0)) => {
                        NonTerminal::Properties(
                            pgs_actions::properties_property(context, p0),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::PropertyP1 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 3usize)
                    .into_iter();
                match (i.next().unwrap(), i.next().unwrap(), i.next().unwrap()) {
                    (
                        Symbol::NonTerminal(NonTerminal::key(p0)),
                        _,
                        Symbol::NonTerminal(NonTerminal::TypeSpec(p1)),
                    ) => NonTerminal::Property(pgs_actions::property_c1(context, p0, p1)),
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::keyP1 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 1usize)
                    .into_iter();
                match i.next().unwrap() {
                    Symbol::Terminal(Terminal::IDENTIFIER(p0)) => {
                        NonTerminal::key(pgs_actions::key_identifier(context, p0))
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::TypeSpecP1 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 1usize)
                    .into_iter();
                match i.next().unwrap() {
                    Symbol::NonTerminal(NonTerminal::SimpleType(p0)) => {
                        NonTerminal::TypeSpec(
                            pgs_actions::type_spec_simple_type(context, p0),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::SimpleTypeP1 => {
                let _ = self
                    .res_stack
                    .split_off(self.res_stack.len() - 1usize)
                    .into_iter();
                NonTerminal::SimpleType(pgs_actions::simple_type_string_name(context))
            }
            ProdKind::SimpleTypeP2 => {
                let _ = self
                    .res_stack
                    .split_off(self.res_stack.len() - 1usize)
                    .into_iter();
                NonTerminal::SimpleType(pgs_actions::simple_type_integer_name(context))
            }
            ProdKind::SimpleTypeP3 => {
                let _ = self
                    .res_stack
                    .split_off(self.res_stack.len() - 1usize)
                    .into_iter();
                NonTerminal::SimpleType(pgs_actions::simple_type_date_name(context))
            }
        };
        self.res_stack.push(Symbol::NonTerminal(prod));
    }
}
