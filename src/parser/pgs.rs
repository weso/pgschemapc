/// Generated by rustemo. Do not edit manually!
use std::fmt::Debug;
use std::hash::Hash;
use rustemo::{
    Result, Input as InputT, Lexer, Token, TokenRecognizer as TokenRecognizerT, Parser,
    ParserDefinition, State as StateT, Builder,
};
use rustemo::regex::Regex;
use rustemo::once_cell::sync::Lazy;
use rustemo::StringLexer;
use rustemo::LRBuilder;
use super::pgs_actions;
use rustemo::{LRParser, LRContext};
use rustemo::Action::{self, Shift, Reduce, Accept};
#[allow(unused_imports)]
use rustemo::debug::{log, logn};
#[allow(unused_imports)]
#[cfg(debug_assertions)]
use rustemo::colored::*;
pub type Input = str;
const STATE_COUNT: usize = 36usize;
const MAX_RECOGNIZERS: usize = 3usize;
#[allow(dead_code)]
const TERMINAL_COUNT: usize = 15usize;
#[allow(clippy::upper_case_acronyms)]
#[derive(Debug, Default, Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]
pub enum TokenKind {
    #[default]
    STOP,
    IDENTIFIER,
    SEMICOLON,
    CREATE,
    NODE,
    EDGE,
    GRAPH,
    TYPE,
    OPEN_PAREN,
    CLOSE_PAREN,
    OPEN_ARROW,
    CLOSE_ARROW,
    OPEN_CURLY,
    CLOSE_CURLY,
    COLON,
}
use TokenKind as TK;
impl From<TokenKind> for usize {
    fn from(t: TokenKind) -> Self {
        t as usize
    }
}
#[allow(clippy::enum_variant_names)]
#[derive(Clone, Copy, PartialEq)]
pub enum ProdKind {
    PgsP1,
    CreateTypeP1,
    CreateTypeP2,
    CreateTypeP3,
    CreateNodeTypeP1,
    CreateEdgeTypeP1,
    CreateGraphTypeP1,
    NodeTypeP1,
    EdgeTypeP1,
    GraphTypeP1,
    TypeNameP1,
    EndpointTypeP1,
    LabelPropertySpecP1,
}
use ProdKind as PK;
impl std::fmt::Debug for ProdKind {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let name = match self {
            ProdKind::PgsP1 => "Pgs: CreateType SEMICOLON",
            ProdKind::CreateTypeP1 => "CreateType: CreateNodeType",
            ProdKind::CreateTypeP2 => "CreateType: CreateEdgeType",
            ProdKind::CreateTypeP3 => "CreateType: CreateGraphType",
            ProdKind::CreateNodeTypeP1 => "CreateNodeType: CREATE NODE TYPE NodeType",
            ProdKind::CreateEdgeTypeP1 => "CreateEdgeType: CREATE EDGE TYPE EdgeType",
            ProdKind::CreateGraphTypeP1 => "CreateGraphType: CREATE GRAPH TYPE GraphType",
            ProdKind::NodeTypeP1 => {
                "NodeType: OPEN_PAREN TypeName LabelPropertySpec CLOSE_PAREN"
            }
            ProdKind::EdgeTypeP1 => {
                "EdgeType: EndpointType OPEN_ARROW TypeName LabelPropertySpec CLOSE_ARROW EndpointType"
            }
            ProdKind::GraphTypeP1 => "GraphType: TypeName OPEN_CURLY CLOSE_CURLY",
            ProdKind::TypeNameP1 => "TypeName: IDENTIFIER",
            ProdKind::EndpointTypeP1 => {
                "EndpointType: OPEN_PAREN LabelPropertySpec CLOSE_PAREN"
            }
            ProdKind::LabelPropertySpecP1 => "LabelPropertySpec: COLON IDENTIFIER",
        };
        write!(f, "{name}")
    }
}
#[allow(clippy::upper_case_acronyms)]
#[allow(dead_code)]
#[derive(Clone, Copy, Debug)]
pub enum NonTermKind {
    EMPTY,
    AUG,
    Pgs,
    CreateType,
    CreateNodeType,
    CreateEdgeType,
    CreateGraphType,
    NodeType,
    EdgeType,
    GraphType,
    TypeName,
    EndpointType,
    LabelPropertySpec,
}
impl From<ProdKind> for NonTermKind {
    fn from(prod: ProdKind) -> Self {
        match prod {
            ProdKind::PgsP1 => NonTermKind::Pgs,
            ProdKind::CreateTypeP1 => NonTermKind::CreateType,
            ProdKind::CreateTypeP2 => NonTermKind::CreateType,
            ProdKind::CreateTypeP3 => NonTermKind::CreateType,
            ProdKind::CreateNodeTypeP1 => NonTermKind::CreateNodeType,
            ProdKind::CreateEdgeTypeP1 => NonTermKind::CreateEdgeType,
            ProdKind::CreateGraphTypeP1 => NonTermKind::CreateGraphType,
            ProdKind::NodeTypeP1 => NonTermKind::NodeType,
            ProdKind::EdgeTypeP1 => NonTermKind::EdgeType,
            ProdKind::GraphTypeP1 => NonTermKind::GraphType,
            ProdKind::TypeNameP1 => NonTermKind::TypeName,
            ProdKind::EndpointTypeP1 => NonTermKind::EndpointType,
            ProdKind::LabelPropertySpecP1 => NonTermKind::LabelPropertySpec,
        }
    }
}
#[allow(clippy::enum_variant_names)]
#[derive(Default, Clone, Copy, PartialEq, Eq, PartialOrd, Ord)]
pub enum State {
    #[default]
    AUGS0,
    CREATES1,
    PgsS2,
    CreateTypeS3,
    CreateNodeTypeS4,
    CreateEdgeTypeS5,
    CreateGraphTypeS6,
    NODES7,
    EDGES8,
    GRAPHS9,
    SEMICOLONS10,
    TYPES11,
    TYPES12,
    TYPES13,
    OPEN_PARENS14,
    NodeTypeS15,
    OPEN_PARENS16,
    EdgeTypeS17,
    EndpointTypeS18,
    IDENTIFIERS19,
    GraphTypeS20,
    TypeNameS21,
    TypeNameS22,
    COLONS23,
    LabelPropertySpecS24,
    OPEN_ARROWS25,
    OPEN_CURLYS26,
    LabelPropertySpecS27,
    IDENTIFIERS28,
    CLOSE_PARENS29,
    TypeNameS30,
    CLOSE_CURLYS31,
    CLOSE_PARENS32,
    LabelPropertySpecS33,
    CLOSE_ARROWS34,
    EndpointTypeS35,
}
impl StateT for State {
    fn default_layout() -> Option<Self> {
        None
    }
}
impl From<State> for usize {
    fn from(s: State) -> Self {
        s as usize
    }
}
impl std::fmt::Debug for State {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let name = match self {
            State::AUGS0 => "0:AUG",
            State::CREATES1 => "1:CREATE",
            State::PgsS2 => "2:Pgs",
            State::CreateTypeS3 => "3:CreateType",
            State::CreateNodeTypeS4 => "4:CreateNodeType",
            State::CreateEdgeTypeS5 => "5:CreateEdgeType",
            State::CreateGraphTypeS6 => "6:CreateGraphType",
            State::NODES7 => "7:NODE",
            State::EDGES8 => "8:EDGE",
            State::GRAPHS9 => "9:GRAPH",
            State::SEMICOLONS10 => "10:SEMICOLON",
            State::TYPES11 => "11:TYPE",
            State::TYPES12 => "12:TYPE",
            State::TYPES13 => "13:TYPE",
            State::OPEN_PARENS14 => "14:OPEN_PAREN",
            State::NodeTypeS15 => "15:NodeType",
            State::OPEN_PARENS16 => "16:OPEN_PAREN",
            State::EdgeTypeS17 => "17:EdgeType",
            State::EndpointTypeS18 => "18:EndpointType",
            State::IDENTIFIERS19 => "19:IDENTIFIER",
            State::GraphTypeS20 => "20:GraphType",
            State::TypeNameS21 => "21:TypeName",
            State::TypeNameS22 => "22:TypeName",
            State::COLONS23 => "23:COLON",
            State::LabelPropertySpecS24 => "24:LabelPropertySpec",
            State::OPEN_ARROWS25 => "25:OPEN_ARROW",
            State::OPEN_CURLYS26 => "26:OPEN_CURLY",
            State::LabelPropertySpecS27 => "27:LabelPropertySpec",
            State::IDENTIFIERS28 => "28:IDENTIFIER",
            State::CLOSE_PARENS29 => "29:CLOSE_PAREN",
            State::TypeNameS30 => "30:TypeName",
            State::CLOSE_CURLYS31 => "31:CLOSE_CURLY",
            State::CLOSE_PARENS32 => "32:CLOSE_PAREN",
            State::LabelPropertySpecS33 => "33:LabelPropertySpec",
            State::CLOSE_ARROWS34 => "34:CLOSE_ARROW",
            State::EndpointTypeS35 => "35:EndpointType",
        };
        write!(f, "{name}")
    }
}
#[derive(Debug)]
pub enum Symbol {
    Terminal(Terminal),
    NonTerminal(NonTerminal),
}
#[allow(clippy::upper_case_acronyms)]
#[derive(Debug)]
pub enum Terminal {
    IDENTIFIER(pgs_actions::IDENTIFIER),
    SEMICOLON,
    CREATE,
    NODE,
    EDGE,
    GRAPH,
    TYPE,
    OPEN_PAREN,
    CLOSE_PAREN,
    OPEN_ARROW,
    CLOSE_ARROW,
    OPEN_CURLY,
    CLOSE_CURLY,
    COLON,
}
#[derive(Debug)]
pub enum NonTerminal {
    Pgs(pgs_actions::Pgs),
    CreateType(pgs_actions::CreateType),
    CreateNodeType(pgs_actions::CreateNodeType),
    CreateEdgeType(pgs_actions::CreateEdgeType),
    CreateGraphType(pgs_actions::CreateGraphType),
    NodeType(pgs_actions::NodeType),
    EdgeType(pgs_actions::EdgeType),
    GraphType(pgs_actions::GraphType),
    TypeName(pgs_actions::TypeName),
    EndpointType(pgs_actions::EndpointType),
    LabelPropertySpec(pgs_actions::LabelPropertySpec),
}
type ActionFn = fn(token: TokenKind) -> Vec<Action<State, ProdKind>>;
pub struct PgsParserDefinition {
    actions: [ActionFn; STATE_COUNT],
    gotos: [fn(nonterm: NonTermKind) -> State; STATE_COUNT],
    token_kinds: [[Option<(TokenKind, bool)>; MAX_RECOGNIZERS]; STATE_COUNT],
}
fn action_aug_s0(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::CREATE => Vec::from(&[Shift(State::CREATES1)]),
        _ => vec![],
    }
}
fn action_create_s1(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::NODE => Vec::from(&[Shift(State::NODES7)]),
        TK::EDGE => Vec::from(&[Shift(State::EDGES8)]),
        TK::GRAPH => Vec::from(&[Shift(State::GRAPHS9)]),
        _ => vec![],
    }
}
fn action_pgs_s2(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::STOP => Vec::from(&[Accept]),
        _ => vec![],
    }
}
fn action_createtype_s3(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::SEMICOLON => Vec::from(&[Shift(State::SEMICOLONS10)]),
        _ => vec![],
    }
}
fn action_createnodetype_s4(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::SEMICOLON => Vec::from(&[Reduce(PK::CreateTypeP1, 1usize)]),
        _ => vec![],
    }
}
fn action_createedgetype_s5(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::SEMICOLON => Vec::from(&[Reduce(PK::CreateTypeP2, 1usize)]),
        _ => vec![],
    }
}
fn action_creategraphtype_s6(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::SEMICOLON => Vec::from(&[Reduce(PK::CreateTypeP3, 1usize)]),
        _ => vec![],
    }
}
fn action_node_s7(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::TYPE => Vec::from(&[Shift(State::TYPES11)]),
        _ => vec![],
    }
}
fn action_edge_s8(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::TYPE => Vec::from(&[Shift(State::TYPES12)]),
        _ => vec![],
    }
}
fn action_graph_s9(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::TYPE => Vec::from(&[Shift(State::TYPES13)]),
        _ => vec![],
    }
}
fn action_semicolon_s10(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::STOP => Vec::from(&[Reduce(PK::PgsP1, 2usize)]),
        _ => vec![],
    }
}
fn action_type_s11(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::OPEN_PAREN => Vec::from(&[Shift(State::OPEN_PARENS14)]),
        _ => vec![],
    }
}
fn action_type_s12(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::OPEN_PAREN => Vec::from(&[Shift(State::OPEN_PARENS16)]),
        _ => vec![],
    }
}
fn action_type_s13(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::IDENTIFIER => Vec::from(&[Shift(State::IDENTIFIERS19)]),
        _ => vec![],
    }
}
fn action_open_paren_s14(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::IDENTIFIER => Vec::from(&[Shift(State::IDENTIFIERS19)]),
        _ => vec![],
    }
}
fn action_nodetype_s15(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::SEMICOLON => Vec::from(&[Reduce(PK::CreateNodeTypeP1, 4usize)]),
        _ => vec![],
    }
}
fn action_open_paren_s16(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::COLON => Vec::from(&[Shift(State::COLONS23)]),
        _ => vec![],
    }
}
fn action_edgetype_s17(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::SEMICOLON => Vec::from(&[Reduce(PK::CreateEdgeTypeP1, 4usize)]),
        _ => vec![],
    }
}
fn action_endpointtype_s18(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::OPEN_ARROW => Vec::from(&[Shift(State::OPEN_ARROWS25)]),
        _ => vec![],
    }
}
fn action_identifier_s19(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::OPEN_CURLY => Vec::from(&[Reduce(PK::TypeNameP1, 1usize)]),
        TK::COLON => Vec::from(&[Reduce(PK::TypeNameP1, 1usize)]),
        _ => vec![],
    }
}
fn action_graphtype_s20(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::SEMICOLON => Vec::from(&[Reduce(PK::CreateGraphTypeP1, 4usize)]),
        _ => vec![],
    }
}
fn action_typename_s21(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::OPEN_CURLY => Vec::from(&[Shift(State::OPEN_CURLYS26)]),
        _ => vec![],
    }
}
fn action_typename_s22(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::COLON => Vec::from(&[Shift(State::COLONS23)]),
        _ => vec![],
    }
}
fn action_colon_s23(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::IDENTIFIER => Vec::from(&[Shift(State::IDENTIFIERS28)]),
        _ => vec![],
    }
}
fn action_labelpropertyspec_s24(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::CLOSE_PAREN => Vec::from(&[Shift(State::CLOSE_PARENS29)]),
        _ => vec![],
    }
}
fn action_open_arrow_s25(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::IDENTIFIER => Vec::from(&[Shift(State::IDENTIFIERS19)]),
        _ => vec![],
    }
}
fn action_open_curly_s26(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::CLOSE_CURLY => Vec::from(&[Shift(State::CLOSE_CURLYS31)]),
        _ => vec![],
    }
}
fn action_labelpropertyspec_s27(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::CLOSE_PAREN => Vec::from(&[Shift(State::CLOSE_PARENS32)]),
        _ => vec![],
    }
}
fn action_identifier_s28(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::CLOSE_PAREN => Vec::from(&[Reduce(PK::LabelPropertySpecP1, 2usize)]),
        TK::CLOSE_ARROW => Vec::from(&[Reduce(PK::LabelPropertySpecP1, 2usize)]),
        _ => vec![],
    }
}
fn action_close_paren_s29(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::SEMICOLON => Vec::from(&[Reduce(PK::EndpointTypeP1, 3usize)]),
        TK::OPEN_ARROW => Vec::from(&[Reduce(PK::EndpointTypeP1, 3usize)]),
        _ => vec![],
    }
}
fn action_typename_s30(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::COLON => Vec::from(&[Shift(State::COLONS23)]),
        _ => vec![],
    }
}
fn action_close_curly_s31(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::SEMICOLON => Vec::from(&[Reduce(PK::GraphTypeP1, 3usize)]),
        _ => vec![],
    }
}
fn action_close_paren_s32(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::SEMICOLON => Vec::from(&[Reduce(PK::NodeTypeP1, 4usize)]),
        _ => vec![],
    }
}
fn action_labelpropertyspec_s33(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::CLOSE_ARROW => Vec::from(&[Shift(State::CLOSE_ARROWS34)]),
        _ => vec![],
    }
}
fn action_close_arrow_s34(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::OPEN_PAREN => Vec::from(&[Shift(State::OPEN_PARENS16)]),
        _ => vec![],
    }
}
fn action_endpointtype_s35(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::SEMICOLON => Vec::from(&[Reduce(PK::EdgeTypeP1, 6usize)]),
        _ => vec![],
    }
}
fn goto_aug_s0(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::Pgs => State::PgsS2,
        NonTermKind::CreateType => State::CreateTypeS3,
        NonTermKind::CreateNodeType => State::CreateNodeTypeS4,
        NonTermKind::CreateEdgeType => State::CreateEdgeTypeS5,
        NonTermKind::CreateGraphType => State::CreateGraphTypeS6,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::AUGS0
            )
        }
    }
}
fn goto_type_s11(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::NodeType => State::NodeTypeS15,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::TYPES11
            )
        }
    }
}
fn goto_type_s12(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::EdgeType => State::EdgeTypeS17,
        NonTermKind::EndpointType => State::EndpointTypeS18,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::TYPES12
            )
        }
    }
}
fn goto_type_s13(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::GraphType => State::GraphTypeS20,
        NonTermKind::TypeName => State::TypeNameS21,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::TYPES13
            )
        }
    }
}
fn goto_open_paren_s14(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::TypeName => State::TypeNameS22,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::OPEN_PARENS14
            )
        }
    }
}
fn goto_open_paren_s16(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::LabelPropertySpec => State::LabelPropertySpecS24,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::OPEN_PARENS16
            )
        }
    }
}
fn goto_typename_s22(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::LabelPropertySpec => State::LabelPropertySpecS27,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::TypeNameS22
            )
        }
    }
}
fn goto_open_arrow_s25(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::TypeName => State::TypeNameS30,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::OPEN_ARROWS25
            )
        }
    }
}
fn goto_typename_s30(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::LabelPropertySpec => State::LabelPropertySpecS33,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::TypeNameS30
            )
        }
    }
}
fn goto_close_arrow_s34(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::EndpointType => State::EndpointTypeS35,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::CLOSE_ARROWS34
            )
        }
    }
}
fn goto_invalid(_nonterm_kind: NonTermKind) -> State {
    panic!("Invalid GOTO entry!");
}
pub(crate) static PARSER_DEFINITION: PgsParserDefinition = PgsParserDefinition {
    actions: [
        action_aug_s0,
        action_create_s1,
        action_pgs_s2,
        action_createtype_s3,
        action_createnodetype_s4,
        action_createedgetype_s5,
        action_creategraphtype_s6,
        action_node_s7,
        action_edge_s8,
        action_graph_s9,
        action_semicolon_s10,
        action_type_s11,
        action_type_s12,
        action_type_s13,
        action_open_paren_s14,
        action_nodetype_s15,
        action_open_paren_s16,
        action_edgetype_s17,
        action_endpointtype_s18,
        action_identifier_s19,
        action_graphtype_s20,
        action_typename_s21,
        action_typename_s22,
        action_colon_s23,
        action_labelpropertyspec_s24,
        action_open_arrow_s25,
        action_open_curly_s26,
        action_labelpropertyspec_s27,
        action_identifier_s28,
        action_close_paren_s29,
        action_typename_s30,
        action_close_curly_s31,
        action_close_paren_s32,
        action_labelpropertyspec_s33,
        action_close_arrow_s34,
        action_endpointtype_s35,
    ],
    gotos: [
        goto_aug_s0,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_type_s11,
        goto_type_s12,
        goto_type_s13,
        goto_open_paren_s14,
        goto_invalid,
        goto_open_paren_s16,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_typename_s22,
        goto_invalid,
        goto_invalid,
        goto_open_arrow_s25,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_typename_s30,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_close_arrow_s34,
        goto_invalid,
    ],
    token_kinds: [
        [Some((TK::CREATE, true)), None, None],
        [Some((TK::GRAPH, true)), Some((TK::NODE, true)), Some((TK::EDGE, true))],
        [Some((TK::STOP, false)), None, None],
        [Some((TK::SEMICOLON, true)), None, None],
        [Some((TK::SEMICOLON, true)), None, None],
        [Some((TK::SEMICOLON, true)), None, None],
        [Some((TK::SEMICOLON, true)), None, None],
        [Some((TK::TYPE, true)), None, None],
        [Some((TK::TYPE, true)), None, None],
        [Some((TK::TYPE, true)), None, None],
        [Some((TK::STOP, false)), None, None],
        [Some((TK::OPEN_PAREN, true)), None, None],
        [Some((TK::OPEN_PAREN, true)), None, None],
        [Some((TK::IDENTIFIER, false)), None, None],
        [Some((TK::IDENTIFIER, false)), None, None],
        [Some((TK::SEMICOLON, true)), None, None],
        [Some((TK::COLON, true)), None, None],
        [Some((TK::SEMICOLON, true)), None, None],
        [Some((TK::OPEN_ARROW, true)), None, None],
        [Some((TK::OPEN_CURLY, true)), Some((TK::COLON, true)), None],
        [Some((TK::SEMICOLON, true)), None, None],
        [Some((TK::OPEN_CURLY, true)), None, None],
        [Some((TK::COLON, true)), None, None],
        [Some((TK::IDENTIFIER, false)), None, None],
        [Some((TK::CLOSE_PAREN, true)), None, None],
        [Some((TK::IDENTIFIER, false)), None, None],
        [Some((TK::CLOSE_CURLY, true)), None, None],
        [Some((TK::CLOSE_PAREN, true)), None, None],
        [Some((TK::CLOSE_ARROW, true)), Some((TK::CLOSE_PAREN, true)), None],
        [Some((TK::OPEN_ARROW, true)), Some((TK::SEMICOLON, true)), None],
        [Some((TK::COLON, true)), None, None],
        [Some((TK::SEMICOLON, true)), None, None],
        [Some((TK::SEMICOLON, true)), None, None],
        [Some((TK::CLOSE_ARROW, true)), None, None],
        [Some((TK::OPEN_PAREN, true)), None, None],
        [Some((TK::SEMICOLON, true)), None, None],
    ],
};
impl ParserDefinition<State, ProdKind, TokenKind, NonTermKind> for PgsParserDefinition {
    fn actions(&self, state: State, token: TokenKind) -> Vec<Action<State, ProdKind>> {
        PARSER_DEFINITION.actions[state as usize](token)
    }
    fn goto(&self, state: State, nonterm: NonTermKind) -> State {
        PARSER_DEFINITION.gotos[state as usize](nonterm)
    }
    fn expected_token_kinds(&self, state: State) -> Vec<(TokenKind, bool)> {
        PARSER_DEFINITION.token_kinds[state as usize].iter().map_while(|t| *t).collect()
    }
    fn longest_match() -> bool {
        true
    }
    fn grammar_order() -> bool {
        true
    }
}
pub(crate) type Context<'i, I> = LRContext<'i, I, State, TokenKind>;
pub struct PgsParser<
    'i,
    I: InputT + ?Sized,
    L: Lexer<'i, Context<'i, I>, State, TokenKind, Input = I>,
    B,
>(
    LRParser<
        'i,
        Context<'i, I>,
        State,
        ProdKind,
        TokenKind,
        NonTermKind,
        PgsParserDefinition,
        L,
        B,
        I,
    >,
);
#[allow(dead_code)]
impl<
    'i,
> PgsParser<
    'i,
    Input,
    StringLexer<Context<'i, Input>, State, TokenKind, TokenRecognizer, TERMINAL_COUNT>,
    DefaultBuilder,
> {
    pub fn new() -> Self {
        Self(
            LRParser::new(
                &PARSER_DEFINITION,
                State::default(),
                false,
                false,
                StringLexer::new(true, &RECOGNIZERS),
                DefaultBuilder::new(),
            ),
        )
    }
}
#[allow(dead_code)]
impl<'i, I, L, B> Parser<'i, I, Context<'i, I>, State, TokenKind>
for PgsParser<'i, I, L, B>
where
    I: InputT + ?Sized + Debug,
    L: Lexer<'i, Context<'i, I>, State, TokenKind, Input = I>,
    B: LRBuilder<'i, I, Context<'i, I>, State, ProdKind, TokenKind>,
{
    type Output = B::Output;
    fn parse(&self, input: &'i I) -> Result<Self::Output> {
        self.0.parse(input)
    }
    fn parse_with_context(
        &self,
        context: &mut Context<'i, I>,
        input: &'i I,
    ) -> Result<Self::Output> {
        self.0.parse_with_context(context, input)
    }
    fn parse_file<'a, F: AsRef<std::path::Path>>(
        &'a mut self,
        file: F,
    ) -> Result<Self::Output>
    where
        'a: 'i,
    {
        self.0.parse_file(file)
    }
}
#[allow(dead_code)]
#[derive(Debug)]
pub enum Recognizer {
    Stop,
    StrMatch(&'static str),
    RegexMatch(Lazy<Regex>),
}
#[allow(dead_code)]
#[derive(Debug)]
pub struct TokenRecognizer(TokenKind, Recognizer);
impl<'i> TokenRecognizerT<'i> for TokenRecognizer {
    fn recognize(&self, input: &'i str) -> Option<&'i str> {
        match &self {
            #[allow(unused_variables)]
            TokenRecognizer(token_kind, Recognizer::StrMatch(s)) => {
                logn!("{} {:?} -- ", "    Recognizing".green(), token_kind);
                if input.starts_with(s) {
                    log!("{}", "recognized".bold().green());
                    Some(s)
                } else {
                    log!("{}", "not recognized".red());
                    None
                }
            }
            #[allow(unused_variables)]
            TokenRecognizer(token_kind, Recognizer::RegexMatch(r)) => {
                logn!("{} {:?} -- ", "    Recognizing".green(), token_kind);
                let match_str = r.find(input);
                match match_str {
                    Some(x) => {
                        let x_str = x.as_str();
                        log!("{} '{}'", "recognized".bold().green(), x_str);
                        Some(x_str)
                    }
                    _ => {
                        log!("{}", "not recognized".red());
                        None
                    }
                }
            }
            TokenRecognizer(_, Recognizer::Stop) => {
                logn!("{} STOP -- ", "    Recognizing".green());
                if input.is_empty() {
                    log!("{}", "recognized".bold().green());
                    Some("")
                } else {
                    log!("{}", "not recognized".red());
                    None
                }
            }
        }
    }
}
pub(crate) static RECOGNIZERS: [TokenRecognizer; TERMINAL_COUNT] = [
    TokenRecognizer(TokenKind::STOP, Recognizer::Stop),
    TokenRecognizer(
        TokenKind::IDENTIFIER,
        Recognizer::RegexMatch(
            Lazy::new(|| { Regex::new(concat!("^", "\\w+")).unwrap() }),
        ),
    ),
    TokenRecognizer(TokenKind::SEMICOLON, Recognizer::StrMatch(";")),
    TokenRecognizer(TokenKind::CREATE, Recognizer::StrMatch("CREATE")),
    TokenRecognizer(TokenKind::NODE, Recognizer::StrMatch("NODE")),
    TokenRecognizer(TokenKind::EDGE, Recognizer::StrMatch("EDGE")),
    TokenRecognizer(TokenKind::GRAPH, Recognizer::StrMatch("GRAPH")),
    TokenRecognizer(TokenKind::TYPE, Recognizer::StrMatch("TYPE")),
    TokenRecognizer(TokenKind::OPEN_PAREN, Recognizer::StrMatch("(")),
    TokenRecognizer(TokenKind::CLOSE_PAREN, Recognizer::StrMatch(")")),
    TokenRecognizer(TokenKind::OPEN_ARROW, Recognizer::StrMatch("-[")),
    TokenRecognizer(TokenKind::CLOSE_ARROW, Recognizer::StrMatch("]->")),
    TokenRecognizer(TokenKind::OPEN_CURLY, Recognizer::StrMatch("{")),
    TokenRecognizer(TokenKind::CLOSE_CURLY, Recognizer::StrMatch("}")),
    TokenRecognizer(TokenKind::COLON, Recognizer::StrMatch(":")),
];
pub struct DefaultBuilder {
    res_stack: Vec<Symbol>,
}
impl DefaultBuilder {
    #[allow(dead_code)]
    pub fn new() -> Self {
        Self { res_stack: vec![] }
    }
}
impl Builder for DefaultBuilder {
    type Output = pgs_actions::Pgs;
    fn get_result(&mut self) -> Self::Output {
        match self.res_stack.pop().unwrap() {
            Symbol::NonTerminal(NonTerminal::Pgs(r)) => r,
            _ => panic!("Invalid result on the parse stack!"),
        }
    }
}
impl<'i> LRBuilder<'i, Input, Context<'i, Input>, State, ProdKind, TokenKind>
for DefaultBuilder {
    #![allow(unused_variables)]
    fn shift_action(
        &mut self,
        context: &Context<'i, Input>,
        token: Token<'i, Input, TokenKind>,
    ) {
        let val = match token.kind {
            TokenKind::STOP => panic!("Cannot shift STOP token!"),
            TokenKind::IDENTIFIER => {
                Terminal::IDENTIFIER(pgs_actions::identifier(context, token))
            }
            TokenKind::SEMICOLON => Terminal::SEMICOLON,
            TokenKind::CREATE => Terminal::CREATE,
            TokenKind::NODE => Terminal::NODE,
            TokenKind::EDGE => Terminal::EDGE,
            TokenKind::GRAPH => Terminal::GRAPH,
            TokenKind::TYPE => Terminal::TYPE,
            TokenKind::OPEN_PAREN => Terminal::OPEN_PAREN,
            TokenKind::CLOSE_PAREN => Terminal::CLOSE_PAREN,
            TokenKind::OPEN_ARROW => Terminal::OPEN_ARROW,
            TokenKind::CLOSE_ARROW => Terminal::CLOSE_ARROW,
            TokenKind::OPEN_CURLY => Terminal::OPEN_CURLY,
            TokenKind::CLOSE_CURLY => Terminal::CLOSE_CURLY,
            TokenKind::COLON => Terminal::COLON,
        };
        self.res_stack.push(Symbol::Terminal(val));
    }
    fn reduce_action(
        &mut self,
        context: &Context<'i, Input>,
        prod: ProdKind,
        prod_len: usize,
    ) {
        let prod = match prod {
            ProdKind::PgsP1 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 2usize)
                    .into_iter();
                match (i.next().unwrap(), i.next().unwrap()) {
                    (Symbol::NonTerminal(NonTerminal::CreateType(p0)), _) => {
                        NonTerminal::Pgs(pgs_actions::pgs_create_type(context, p0))
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::CreateTypeP1 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 1usize)
                    .into_iter();
                match i.next().unwrap() {
                    Symbol::NonTerminal(NonTerminal::CreateNodeType(p0)) => {
                        NonTerminal::CreateType(
                            pgs_actions::create_type_create_node_type(context, p0),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::CreateTypeP2 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 1usize)
                    .into_iter();
                match i.next().unwrap() {
                    Symbol::NonTerminal(NonTerminal::CreateEdgeType(p0)) => {
                        NonTerminal::CreateType(
                            pgs_actions::create_type_create_edge_type(context, p0),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::CreateTypeP3 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 1usize)
                    .into_iter();
                match i.next().unwrap() {
                    Symbol::NonTerminal(NonTerminal::CreateGraphType(p0)) => {
                        NonTerminal::CreateType(
                            pgs_actions::create_type_create_graph_type(context, p0),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::CreateNodeTypeP1 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 4usize)
                    .into_iter();
                match (
                    i.next().unwrap(),
                    i.next().unwrap(),
                    i.next().unwrap(),
                    i.next().unwrap(),
                ) {
                    (_, _, _, Symbol::NonTerminal(NonTerminal::NodeType(p0))) => {
                        NonTerminal::CreateNodeType(
                            pgs_actions::create_node_type_node_type(context, p0),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::CreateEdgeTypeP1 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 4usize)
                    .into_iter();
                match (
                    i.next().unwrap(),
                    i.next().unwrap(),
                    i.next().unwrap(),
                    i.next().unwrap(),
                ) {
                    (_, _, _, Symbol::NonTerminal(NonTerminal::EdgeType(p0))) => {
                        NonTerminal::CreateEdgeType(
                            pgs_actions::create_edge_type_edge_type(context, p0),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::CreateGraphTypeP1 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 4usize)
                    .into_iter();
                match (
                    i.next().unwrap(),
                    i.next().unwrap(),
                    i.next().unwrap(),
                    i.next().unwrap(),
                ) {
                    (_, _, _, Symbol::NonTerminal(NonTerminal::GraphType(p0))) => {
                        NonTerminal::CreateGraphType(
                            pgs_actions::create_graph_type_graph_type(context, p0),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::NodeTypeP1 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 4usize)
                    .into_iter();
                match (
                    i.next().unwrap(),
                    i.next().unwrap(),
                    i.next().unwrap(),
                    i.next().unwrap(),
                ) {
                    (
                        _,
                        Symbol::NonTerminal(NonTerminal::TypeName(p0)),
                        Symbol::NonTerminal(NonTerminal::LabelPropertySpec(p1)),
                        _,
                    ) => {
                        NonTerminal::NodeType(pgs_actions::node_type_c1(context, p0, p1))
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::EdgeTypeP1 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 6usize)
                    .into_iter();
                match (
                    i.next().unwrap(),
                    i.next().unwrap(),
                    i.next().unwrap(),
                    i.next().unwrap(),
                    i.next().unwrap(),
                    i.next().unwrap(),
                ) {
                    (
                        Symbol::NonTerminal(NonTerminal::EndpointType(p0)),
                        _,
                        Symbol::NonTerminal(NonTerminal::TypeName(p1)),
                        Symbol::NonTerminal(NonTerminal::LabelPropertySpec(p2)),
                        _,
                        Symbol::NonTerminal(NonTerminal::EndpointType(p3)),
                    ) => {
                        NonTerminal::EdgeType(
                            pgs_actions::edge_type_c1(context, p0, p1, p2, p3),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::GraphTypeP1 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 3usize)
                    .into_iter();
                match (i.next().unwrap(), i.next().unwrap(), i.next().unwrap()) {
                    (Symbol::NonTerminal(NonTerminal::TypeName(p0)), _, _) => {
                        NonTerminal::GraphType(
                            pgs_actions::graph_type_type_name(context, p0),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::TypeNameP1 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 1usize)
                    .into_iter();
                match i.next().unwrap() {
                    Symbol::Terminal(Terminal::IDENTIFIER(p0)) => {
                        NonTerminal::TypeName(
                            pgs_actions::type_name_identifier(context, p0),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::EndpointTypeP1 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 3usize)
                    .into_iter();
                match (i.next().unwrap(), i.next().unwrap(), i.next().unwrap()) {
                    (_, Symbol::NonTerminal(NonTerminal::LabelPropertySpec(p0)), _) => {
                        NonTerminal::EndpointType(
                            pgs_actions::endpoint_type_label_property_spec(context, p0),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::LabelPropertySpecP1 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 2usize)
                    .into_iter();
                match (i.next().unwrap(), i.next().unwrap()) {
                    (_, Symbol::Terminal(Terminal::IDENTIFIER(p0))) => {
                        NonTerminal::LabelPropertySpec(
                            pgs_actions::label_property_spec_identifier(context, p0),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
        };
        self.res_stack.push(Symbol::NonTerminal(prod));
    }
}
