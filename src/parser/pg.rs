use super::pg_actions;
use rustemo::Action::{self, Accept, Reduce, Shift};
use rustemo::LRBuilder;
use rustemo::StringLexer;
#[allow(unused_imports)]
#[cfg(debug_assertions)]
use rustemo::colored::*;
#[allow(unused_imports)]
use rustemo::debug::{log, logn};
use rustemo::once_cell::sync::Lazy;
use rustemo::regex::Regex;
use rustemo::{
    Builder, Input as InputT, Lexer, Parser, ParserDefinition, Result, State as StateT, Token,
    TokenRecognizer as TokenRecognizerT,
};
use rustemo::{LRContext, LRParser};
/// Generated by rustemo. Do not edit manually!
use std::fmt::Debug;
use std::hash::Hash;
pub type Input = str;
const STATE_COUNT: usize = 62usize;
const MAX_RECOGNIZERS: usize = 6usize;
#[allow(dead_code)]
const TERMINAL_COUNT: usize = 35usize;
#[allow(clippy::upper_case_acronyms)]
#[derive(Debug, Default, Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]
pub enum TokenKind {
    #[default]
    STOP,
    WS,
    CommentLine,
    NotComment,
    START_COMMENT,
    END_COMMENT,
    QUOTED_STRING,
    IDENTIFIER,
    SEMICOLON,
    CREATE,
    NODE,
    EDGE,
    GRAPH,
    TYPE,
    OPEN_PAREN,
    CLOSE_PAREN,
    OPEN_ARROW,
    CLOSE_ARROW,
    OPEN_CURLY,
    CLOSE_CURLY,
    COLON,
    COMMA,
    BAR,
    PLUS,
    STAR,
    QUESTION,
    INTEGER_NAME,
    STRING_NAME,
    DATE_NAME,
    NUMBER,
    OPTIONAL,
    QUOTE,
    AMPERSAND,
    OPENSQUAREBRACKET,
    CLOSESQUAREBRACKET,
}
use TokenKind as TK;
impl From<TokenKind> for usize {
    fn from(t: TokenKind) -> Self {
        t as usize
    }
}
#[allow(clippy::enum_variant_names)]
#[derive(Clone, Copy, PartialEq)]
pub enum ProdKind {
    PgP1,
    NodesP1,
    Node1P1,
    Node1P2,
    NodeP1,
    IdP1,
    LabelPropertySpecP1,
    LabelSpecOptP1,
    LabelSpecOptP2,
    PropertySpecOptP1,
    PropertySpecOptP2,
    LabelSpecP1,
    IDENTIFIER1P1,
    IDENTIFIER1P2,
    PropertySpecP1,
    PropertiesP1,
    Property1P1,
    Property1P2,
    PropertyP1,
    keyP1,
    ValuesP1,
    ValuesListValue,
    ListValuesP1,
    SingleValue1P1,
    SingleValue1P2,
    SingleValue0P1,
    SingleValue0P2,
    SingleValueStringValue,
    SingleValueNumberValue,
    LayoutP1,
    LayoutItem1P1,
    LayoutItem1P2,
    LayoutItem0P1,
    LayoutItem0P2,
    LayoutItemP1,
    LayoutItemP2,
    CommentP1,
    CommentP2,
    CorncsP1,
    Cornc1P1,
    Cornc1P2,
    Cornc0P1,
    Cornc0P2,
    CorncP1,
    CorncP2,
    CorncP3,
}
use ProdKind as PK;
impl std::fmt::Debug for ProdKind {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let name = match self {
            ProdKind::PgP1 => "Pg: Nodes",
            ProdKind::NodesP1 => "Nodes: Node1",
            ProdKind::Node1P1 => "Node1: Node1 SEMICOLON Node",
            ProdKind::Node1P2 => "Node1: Node",
            ProdKind::NodeP1 => "Node: OPEN_PAREN Id LabelPropertySpec CLOSE_PAREN",
            ProdKind::IdP1 => "Id: IDENTIFIER",
            ProdKind::LabelPropertySpecP1 => "LabelPropertySpec: LabelSpecOpt PropertySpecOpt",
            ProdKind::LabelSpecOptP1 => "LabelSpecOpt: LabelSpec",
            ProdKind::LabelSpecOptP2 => "LabelSpecOpt: ",
            ProdKind::PropertySpecOptP1 => "PropertySpecOpt: PropertySpec",
            ProdKind::PropertySpecOptP2 => "PropertySpecOpt: ",
            ProdKind::LabelSpecP1 => "LabelSpec: COLON IDENTIFIER1",
            ProdKind::IDENTIFIER1P1 => "IDENTIFIER1: IDENTIFIER1 AMPERSAND IDENTIFIER",
            ProdKind::IDENTIFIER1P2 => "IDENTIFIER1: IDENTIFIER",
            ProdKind::PropertySpecP1 => "PropertySpec: OPEN_CURLY Properties CLOSE_CURLY",
            ProdKind::PropertiesP1 => "Properties: Property1",
            ProdKind::Property1P1 => "Property1: Property1 COMMA Property",
            ProdKind::Property1P2 => "Property1: Property",
            ProdKind::PropertyP1 => "Property: key COLON Values",
            ProdKind::keyP1 => "key: IDENTIFIER",
            ProdKind::ValuesP1 => "Values: SingleValue",
            ProdKind::ValuesListValue => "Values: OPENSQUAREBRACKET ListValues CLOSESQUAREBRACKET",
            ProdKind::ListValuesP1 => "ListValues: SingleValue0",
            ProdKind::SingleValue1P1 => "SingleValue1: SingleValue1 COMMA SingleValue",
            ProdKind::SingleValue1P2 => "SingleValue1: SingleValue",
            ProdKind::SingleValue0P1 => "SingleValue0: SingleValue1",
            ProdKind::SingleValue0P2 => "SingleValue0: ",
            ProdKind::SingleValueStringValue => "SingleValue: QUOTED_STRING",
            ProdKind::SingleValueNumberValue => "SingleValue: NUMBER",
            ProdKind::LayoutP1 => "Layout: LayoutItem0",
            ProdKind::LayoutItem1P1 => "LayoutItem1: LayoutItem1 LayoutItem",
            ProdKind::LayoutItem1P2 => "LayoutItem1: LayoutItem",
            ProdKind::LayoutItem0P1 => "LayoutItem0: LayoutItem1",
            ProdKind::LayoutItem0P2 => "LayoutItem0: ",
            ProdKind::LayoutItemP1 => "LayoutItem: WS",
            ProdKind::LayoutItemP2 => "LayoutItem: Comment",
            ProdKind::CommentP1 => "Comment: START_COMMENT Corncs END_COMMENT",
            ProdKind::CommentP2 => "Comment: CommentLine",
            ProdKind::CorncsP1 => "Corncs: Cornc0",
            ProdKind::Cornc1P1 => "Cornc1: Cornc1 Cornc",
            ProdKind::Cornc1P2 => "Cornc1: Cornc",
            ProdKind::Cornc0P1 => "Cornc0: Cornc1",
            ProdKind::Cornc0P2 => "Cornc0: ",
            ProdKind::CorncP1 => "Cornc: Comment",
            ProdKind::CorncP2 => "Cornc: NotComment",
            ProdKind::CorncP3 => "Cornc: WS",
        };
        write!(f, "{name}")
    }
}
#[allow(clippy::upper_case_acronyms)]
#[allow(dead_code)]
#[derive(Clone, Copy, Debug)]
pub enum NonTermKind {
    EMPTY,
    AUG,
    AUGL,
    Pg,
    Nodes,
    Node1,
    Node,
    Id,
    LabelPropertySpec,
    LabelSpecOpt,
    PropertySpecOpt,
    LabelSpec,
    IDENTIFIER1,
    PropertySpec,
    Properties,
    Property1,
    Property,
    key,
    Values,
    ListValues,
    SingleValue1,
    SingleValue0,
    SingleValue,
    Layout,
    LayoutItem1,
    LayoutItem0,
    LayoutItem,
    Comment,
    Corncs,
    Cornc1,
    Cornc0,
    Cornc,
}
impl From<ProdKind> for NonTermKind {
    fn from(prod: ProdKind) -> Self {
        match prod {
            ProdKind::PgP1 => NonTermKind::Pg,
            ProdKind::NodesP1 => NonTermKind::Nodes,
            ProdKind::Node1P1 => NonTermKind::Node1,
            ProdKind::Node1P2 => NonTermKind::Node1,
            ProdKind::NodeP1 => NonTermKind::Node,
            ProdKind::IdP1 => NonTermKind::Id,
            ProdKind::LabelPropertySpecP1 => NonTermKind::LabelPropertySpec,
            ProdKind::LabelSpecOptP1 => NonTermKind::LabelSpecOpt,
            ProdKind::LabelSpecOptP2 => NonTermKind::LabelSpecOpt,
            ProdKind::PropertySpecOptP1 => NonTermKind::PropertySpecOpt,
            ProdKind::PropertySpecOptP2 => NonTermKind::PropertySpecOpt,
            ProdKind::LabelSpecP1 => NonTermKind::LabelSpec,
            ProdKind::IDENTIFIER1P1 => NonTermKind::IDENTIFIER1,
            ProdKind::IDENTIFIER1P2 => NonTermKind::IDENTIFIER1,
            ProdKind::PropertySpecP1 => NonTermKind::PropertySpec,
            ProdKind::PropertiesP1 => NonTermKind::Properties,
            ProdKind::Property1P1 => NonTermKind::Property1,
            ProdKind::Property1P2 => NonTermKind::Property1,
            ProdKind::PropertyP1 => NonTermKind::Property,
            ProdKind::keyP1 => NonTermKind::key,
            ProdKind::ValuesP1 => NonTermKind::Values,
            ProdKind::ValuesListValue => NonTermKind::Values,
            ProdKind::ListValuesP1 => NonTermKind::ListValues,
            ProdKind::SingleValue1P1 => NonTermKind::SingleValue1,
            ProdKind::SingleValue1P2 => NonTermKind::SingleValue1,
            ProdKind::SingleValue0P1 => NonTermKind::SingleValue0,
            ProdKind::SingleValue0P2 => NonTermKind::SingleValue0,
            ProdKind::SingleValueStringValue => NonTermKind::SingleValue,
            ProdKind::SingleValueNumberValue => NonTermKind::SingleValue,
            ProdKind::LayoutP1 => NonTermKind::Layout,
            ProdKind::LayoutItem1P1 => NonTermKind::LayoutItem1,
            ProdKind::LayoutItem1P2 => NonTermKind::LayoutItem1,
            ProdKind::LayoutItem0P1 => NonTermKind::LayoutItem0,
            ProdKind::LayoutItem0P2 => NonTermKind::LayoutItem0,
            ProdKind::LayoutItemP1 => NonTermKind::LayoutItem,
            ProdKind::LayoutItemP2 => NonTermKind::LayoutItem,
            ProdKind::CommentP1 => NonTermKind::Comment,
            ProdKind::CommentP2 => NonTermKind::Comment,
            ProdKind::CorncsP1 => NonTermKind::Corncs,
            ProdKind::Cornc1P1 => NonTermKind::Cornc1,
            ProdKind::Cornc1P2 => NonTermKind::Cornc1,
            ProdKind::Cornc0P1 => NonTermKind::Cornc0,
            ProdKind::Cornc0P2 => NonTermKind::Cornc0,
            ProdKind::CorncP1 => NonTermKind::Cornc,
            ProdKind::CorncP2 => NonTermKind::Cornc,
            ProdKind::CorncP3 => NonTermKind::Cornc,
        }
    }
}
#[allow(clippy::enum_variant_names)]
#[derive(Default, Clone, Copy, PartialEq, Eq, PartialOrd, Ord)]
pub enum State {
    #[default]
    AUGS0,
    OPEN_PARENS1,
    PgS2,
    NodesS3,
    Node1S4,
    NodeS5,
    IDENTIFIERS6,
    IdS7,
    SEMICOLONS8,
    COLONS9,
    LabelPropertySpecS10,
    LabelSpecOptS11,
    LabelSpecS12,
    NodeS13,
    IDENTIFIERS14,
    IDENTIFIER1S15,
    CLOSE_PARENS16,
    OPEN_CURLYS17,
    PropertySpecOptS18,
    PropertySpecS19,
    AMPERSANDS20,
    IDENTIFIERS21,
    PropertiesS22,
    Property1S23,
    PropertyS24,
    keyS25,
    IDENTIFIERS26,
    CLOSE_CURLYS27,
    COMMAS28,
    COLONS29,
    PropertyS30,
    QUOTED_STRINGS31,
    NUMBERS32,
    OPENSQUAREBRACKETS33,
    ValuesS34,
    SingleValueS35,
    ListValuesS36,
    SingleValue1S37,
    SingleValue0S38,
    SingleValueS39,
    CLOSESQUAREBRACKETS40,
    COMMAS41,
    SingleValueS42,
    AUGLS43,
    WSS44,
    CommentLineS45,
    START_COMMENTS46,
    LayoutS47,
    LayoutItem1S48,
    LayoutItem0S49,
    LayoutItemS50,
    CommentS51,
    WSS52,
    NotCommentS53,
    CommentS54,
    CorncsS55,
    Cornc1S56,
    Cornc0S57,
    CorncS58,
    LayoutItemS59,
    END_COMMENTS60,
    CorncS61,
}
impl StateT for State {
    fn default_layout() -> Option<Self> {
        Some(State::AUGLS43)
    }
}
impl From<State> for usize {
    fn from(s: State) -> Self {
        s as usize
    }
}
impl std::fmt::Debug for State {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let name = match self {
            State::AUGS0 => "0:AUG",
            State::OPEN_PARENS1 => "1:OPEN_PAREN",
            State::PgS2 => "2:Pg",
            State::NodesS3 => "3:Nodes",
            State::Node1S4 => "4:Node1",
            State::NodeS5 => "5:Node",
            State::IDENTIFIERS6 => "6:IDENTIFIER",
            State::IdS7 => "7:Id",
            State::SEMICOLONS8 => "8:SEMICOLON",
            State::COLONS9 => "9:COLON",
            State::LabelPropertySpecS10 => "10:LabelPropertySpec",
            State::LabelSpecOptS11 => "11:LabelSpecOpt",
            State::LabelSpecS12 => "12:LabelSpec",
            State::NodeS13 => "13:Node",
            State::IDENTIFIERS14 => "14:IDENTIFIER",
            State::IDENTIFIER1S15 => "15:IDENTIFIER1",
            State::CLOSE_PARENS16 => "16:CLOSE_PAREN",
            State::OPEN_CURLYS17 => "17:OPEN_CURLY",
            State::PropertySpecOptS18 => "18:PropertySpecOpt",
            State::PropertySpecS19 => "19:PropertySpec",
            State::AMPERSANDS20 => "20:AMPERSAND",
            State::IDENTIFIERS21 => "21:IDENTIFIER",
            State::PropertiesS22 => "22:Properties",
            State::Property1S23 => "23:Property1",
            State::PropertyS24 => "24:Property",
            State::keyS25 => "25:key",
            State::IDENTIFIERS26 => "26:IDENTIFIER",
            State::CLOSE_CURLYS27 => "27:CLOSE_CURLY",
            State::COMMAS28 => "28:COMMA",
            State::COLONS29 => "29:COLON",
            State::PropertyS30 => "30:Property",
            State::QUOTED_STRINGS31 => "31:QUOTED_STRING",
            State::NUMBERS32 => "32:NUMBER",
            State::OPENSQUAREBRACKETS33 => "33:OPENSQUAREBRACKET",
            State::ValuesS34 => "34:Values",
            State::SingleValueS35 => "35:SingleValue",
            State::ListValuesS36 => "36:ListValues",
            State::SingleValue1S37 => "37:SingleValue1",
            State::SingleValue0S38 => "38:SingleValue0",
            State::SingleValueS39 => "39:SingleValue",
            State::CLOSESQUAREBRACKETS40 => "40:CLOSESQUAREBRACKET",
            State::COMMAS41 => "41:COMMA",
            State::SingleValueS42 => "42:SingleValue",
            State::AUGLS43 => "43:AUGL",
            State::WSS44 => "44:WS",
            State::CommentLineS45 => "45:CommentLine",
            State::START_COMMENTS46 => "46:START_COMMENT",
            State::LayoutS47 => "47:Layout",
            State::LayoutItem1S48 => "48:LayoutItem1",
            State::LayoutItem0S49 => "49:LayoutItem0",
            State::LayoutItemS50 => "50:LayoutItem",
            State::CommentS51 => "51:Comment",
            State::WSS52 => "52:WS",
            State::NotCommentS53 => "53:NotComment",
            State::CommentS54 => "54:Comment",
            State::CorncsS55 => "55:Corncs",
            State::Cornc1S56 => "56:Cornc1",
            State::Cornc0S57 => "57:Cornc0",
            State::CorncS58 => "58:Cornc",
            State::LayoutItemS59 => "59:LayoutItem",
            State::END_COMMENTS60 => "60:END_COMMENT",
            State::CorncS61 => "61:Cornc",
        };
        write!(f, "{name}")
    }
}
#[derive(Debug)]
pub enum Symbol {
    Terminal(Terminal),
    NonTerminal(NonTerminal),
}
#[allow(clippy::upper_case_acronyms)]
#[derive(Debug)]
pub enum Terminal {
    QUOTED_STRING(pg_actions::QUOTED_STRING),
    IDENTIFIER(pg_actions::IDENTIFIER),
    SEMICOLON,
    OPEN_PAREN,
    CLOSE_PAREN,
    OPEN_CURLY,
    CLOSE_CURLY,
    COLON,
    COMMA,
    NUMBER(pg_actions::NUMBER),
    AMPERSAND,
    OPENSQUAREBRACKET,
    CLOSESQUAREBRACKET,
}
#[derive(Debug)]
pub enum NonTerminal {
    Pg(pg_actions::Pg),
    Nodes(pg_actions::Nodes),
    Node1(pg_actions::Node1),
    Node(pg_actions::Node),
    Id(pg_actions::Id),
    LabelPropertySpec(pg_actions::LabelPropertySpec),
    LabelSpecOpt(pg_actions::LabelSpecOpt),
    PropertySpecOpt(pg_actions::PropertySpecOpt),
    LabelSpec(pg_actions::LabelSpec),
    IDENTIFIER1(pg_actions::IDENTIFIER1),
    PropertySpec(pg_actions::PropertySpec),
    Properties(pg_actions::Properties),
    Property1(pg_actions::Property1),
    Property(pg_actions::Property),
    key(pg_actions::key),
    Values(pg_actions::Values),
    ListValues(pg_actions::ListValues),
    SingleValue1(pg_actions::SingleValue1),
    SingleValue0(pg_actions::SingleValue0),
    SingleValue(pg_actions::SingleValue),
}
type ActionFn = fn(token: TokenKind) -> Vec<Action<State, ProdKind>>;
pub struct PgParserDefinition {
    actions: [ActionFn; STATE_COUNT],
    gotos: [fn(nonterm: NonTermKind) -> State; STATE_COUNT],
    token_kinds: [[Option<(TokenKind, bool)>; MAX_RECOGNIZERS]; STATE_COUNT],
}
fn action_aug_s0(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::OPEN_PAREN => Vec::from(&[Shift(State::OPEN_PARENS1)]),
        _ => vec![],
    }
}
fn action_open_paren_s1(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::IDENTIFIER => Vec::from(&[Shift(State::IDENTIFIERS6)]),
        _ => vec![],
    }
}
fn action_pg_s2(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::STOP => Vec::from(&[Accept]),
        _ => vec![],
    }
}
fn action_nodes_s3(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::STOP => Vec::from(&[Reduce(PK::PgP1, 1usize)]),
        _ => vec![],
    }
}
fn action_node1_s4(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::STOP => Vec::from(&[Reduce(PK::NodesP1, 1usize)]),
        TK::SEMICOLON => Vec::from(&[Shift(State::SEMICOLONS8)]),
        _ => vec![],
    }
}
fn action_node_s5(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::STOP => Vec::from(&[Reduce(PK::Node1P2, 1usize)]),
        TK::SEMICOLON => Vec::from(&[Reduce(PK::Node1P2, 1usize)]),
        _ => vec![],
    }
}
fn action_identifier_s6(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::CLOSE_PAREN => Vec::from(&[Reduce(PK::IdP1, 1usize)]),
        TK::OPEN_CURLY => Vec::from(&[Reduce(PK::IdP1, 1usize)]),
        TK::COLON => Vec::from(&[Reduce(PK::IdP1, 1usize)]),
        _ => vec![],
    }
}
fn action_id_s7(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::CLOSE_PAREN => Vec::from(&[Reduce(PK::LabelSpecOptP2, 0usize)]),
        TK::OPEN_CURLY => Vec::from(&[Reduce(PK::LabelSpecOptP2, 0usize)]),
        TK::COLON => Vec::from(&[Shift(State::COLONS9)]),
        _ => vec![],
    }
}
fn action_semicolon_s8(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::OPEN_PAREN => Vec::from(&[Shift(State::OPEN_PARENS1)]),
        _ => vec![],
    }
}
fn action_colon_s9(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::IDENTIFIER => Vec::from(&[Shift(State::IDENTIFIERS14)]),
        _ => vec![],
    }
}
fn action_labelpropertyspec_s10(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::CLOSE_PAREN => Vec::from(&[Shift(State::CLOSE_PARENS16)]),
        _ => vec![],
    }
}
fn action_labelspecopt_s11(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::CLOSE_PAREN => Vec::from(&[Reduce(PK::PropertySpecOptP2, 0usize)]),
        TK::OPEN_CURLY => Vec::from(&[Shift(State::OPEN_CURLYS17)]),
        _ => vec![],
    }
}
fn action_labelspec_s12(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::CLOSE_PAREN => Vec::from(&[Reduce(PK::LabelSpecOptP1, 1usize)]),
        TK::OPEN_CURLY => Vec::from(&[Reduce(PK::LabelSpecOptP1, 1usize)]),
        _ => vec![],
    }
}
fn action_node_s13(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::STOP => Vec::from(&[Reduce(PK::Node1P1, 3usize)]),
        TK::SEMICOLON => Vec::from(&[Reduce(PK::Node1P1, 3usize)]),
        _ => vec![],
    }
}
fn action_identifier_s14(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::CLOSE_PAREN => Vec::from(&[Reduce(PK::IDENTIFIER1P2, 1usize)]),
        TK::OPEN_CURLY => Vec::from(&[Reduce(PK::IDENTIFIER1P2, 1usize)]),
        TK::AMPERSAND => Vec::from(&[Reduce(PK::IDENTIFIER1P2, 1usize)]),
        _ => vec![],
    }
}
fn action_identifier1_s15(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::CLOSE_PAREN => Vec::from(&[Reduce(PK::LabelSpecP1, 2usize)]),
        TK::OPEN_CURLY => Vec::from(&[Reduce(PK::LabelSpecP1, 2usize)]),
        TK::AMPERSAND => Vec::from(&[Shift(State::AMPERSANDS20)]),
        _ => vec![],
    }
}
fn action_close_paren_s16(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::STOP => Vec::from(&[Reduce(PK::NodeP1, 4usize)]),
        TK::SEMICOLON => Vec::from(&[Reduce(PK::NodeP1, 4usize)]),
        _ => vec![],
    }
}
fn action_open_curly_s17(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::IDENTIFIER => Vec::from(&[Shift(State::IDENTIFIERS21)]),
        _ => vec![],
    }
}
fn action_propertyspecopt_s18(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::CLOSE_PAREN => Vec::from(&[Reduce(PK::LabelPropertySpecP1, 2usize)]),
        _ => vec![],
    }
}
fn action_propertyspec_s19(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::CLOSE_PAREN => Vec::from(&[Reduce(PK::PropertySpecOptP1, 1usize)]),
        _ => vec![],
    }
}
fn action_ampersand_s20(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::IDENTIFIER => Vec::from(&[Shift(State::IDENTIFIERS26)]),
        _ => vec![],
    }
}
fn action_identifier_s21(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::COLON => Vec::from(&[Reduce(PK::keyP1, 1usize)]),
        _ => vec![],
    }
}
fn action_properties_s22(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::CLOSE_CURLY => Vec::from(&[Shift(State::CLOSE_CURLYS27)]),
        _ => vec![],
    }
}
fn action_property1_s23(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::CLOSE_CURLY => Vec::from(&[Reduce(PK::PropertiesP1, 1usize)]),
        TK::COMMA => Vec::from(&[Shift(State::COMMAS28)]),
        _ => vec![],
    }
}
fn action_property_s24(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::CLOSE_CURLY => Vec::from(&[Reduce(PK::Property1P2, 1usize)]),
        TK::COMMA => Vec::from(&[Reduce(PK::Property1P2, 1usize)]),
        _ => vec![],
    }
}
fn action_key_s25(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::COLON => Vec::from(&[Shift(State::COLONS29)]),
        _ => vec![],
    }
}
fn action_identifier_s26(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::CLOSE_PAREN => Vec::from(&[Reduce(PK::IDENTIFIER1P1, 3usize)]),
        TK::OPEN_CURLY => Vec::from(&[Reduce(PK::IDENTIFIER1P1, 3usize)]),
        TK::AMPERSAND => Vec::from(&[Reduce(PK::IDENTIFIER1P1, 3usize)]),
        _ => vec![],
    }
}
fn action_close_curly_s27(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::CLOSE_PAREN => Vec::from(&[Reduce(PK::PropertySpecP1, 3usize)]),
        _ => vec![],
    }
}
fn action_comma_s28(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::IDENTIFIER => Vec::from(&[Shift(State::IDENTIFIERS21)]),
        _ => vec![],
    }
}
fn action_colon_s29(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::QUOTED_STRING => Vec::from(&[Shift(State::QUOTED_STRINGS31)]),
        TK::NUMBER => Vec::from(&[Shift(State::NUMBERS32)]),
        TK::OPENSQUAREBRACKET => Vec::from(&[Shift(State::OPENSQUAREBRACKETS33)]),
        _ => vec![],
    }
}
fn action_property_s30(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::CLOSE_CURLY => Vec::from(&[Reduce(PK::Property1P1, 3usize)]),
        TK::COMMA => Vec::from(&[Reduce(PK::Property1P1, 3usize)]),
        _ => vec![],
    }
}
fn action_quoted_string_s31(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::CLOSE_CURLY => Vec::from(&[Reduce(PK::SingleValueStringValue, 1usize)]),
        TK::COMMA => Vec::from(&[Reduce(PK::SingleValueStringValue, 1usize)]),
        TK::CLOSESQUAREBRACKET => Vec::from(&[Reduce(PK::SingleValueStringValue, 1usize)]),
        _ => vec![],
    }
}
fn action_number_s32(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::CLOSE_CURLY => Vec::from(&[Reduce(PK::SingleValueNumberValue, 1usize)]),
        TK::COMMA => Vec::from(&[Reduce(PK::SingleValueNumberValue, 1usize)]),
        TK::CLOSESQUAREBRACKET => Vec::from(&[Reduce(PK::SingleValueNumberValue, 1usize)]),
        _ => vec![],
    }
}
fn action_opensquarebracket_s33(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::QUOTED_STRING => Vec::from(&[Shift(State::QUOTED_STRINGS31)]),
        TK::NUMBER => Vec::from(&[Shift(State::NUMBERS32)]),
        TK::CLOSESQUAREBRACKET => Vec::from(&[Reduce(PK::SingleValue0P2, 0usize)]),
        _ => vec![],
    }
}
fn action_values_s34(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::CLOSE_CURLY => Vec::from(&[Reduce(PK::PropertyP1, 3usize)]),
        TK::COMMA => Vec::from(&[Reduce(PK::PropertyP1, 3usize)]),
        _ => vec![],
    }
}
fn action_singlevalue_s35(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::CLOSE_CURLY => Vec::from(&[Reduce(PK::ValuesP1, 1usize)]),
        TK::COMMA => Vec::from(&[Reduce(PK::ValuesP1, 1usize)]),
        _ => vec![],
    }
}
fn action_listvalues_s36(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::CLOSESQUAREBRACKET => Vec::from(&[Shift(State::CLOSESQUAREBRACKETS40)]),
        _ => vec![],
    }
}
fn action_singlevalue1_s37(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::COMMA => Vec::from(&[Shift(State::COMMAS41)]),
        TK::CLOSESQUAREBRACKET => Vec::from(&[Reduce(PK::SingleValue0P1, 1usize)]),
        _ => vec![],
    }
}
fn action_singlevalue0_s38(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::CLOSESQUAREBRACKET => Vec::from(&[Reduce(PK::ListValuesP1, 1usize)]),
        _ => vec![],
    }
}
fn action_singlevalue_s39(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::COMMA => Vec::from(&[Reduce(PK::SingleValue1P2, 1usize)]),
        TK::CLOSESQUAREBRACKET => Vec::from(&[Reduce(PK::SingleValue1P2, 1usize)]),
        _ => vec![],
    }
}
fn action_closesquarebracket_s40(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::CLOSE_CURLY => Vec::from(&[Reduce(PK::ValuesListValue, 3usize)]),
        TK::COMMA => Vec::from(&[Reduce(PK::ValuesListValue, 3usize)]),
        _ => vec![],
    }
}
fn action_comma_s41(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::QUOTED_STRING => Vec::from(&[Shift(State::QUOTED_STRINGS31)]),
        TK::NUMBER => Vec::from(&[Shift(State::NUMBERS32)]),
        _ => vec![],
    }
}
fn action_singlevalue_s42(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::COMMA => Vec::from(&[Reduce(PK::SingleValue1P1, 3usize)]),
        TK::CLOSESQUAREBRACKET => Vec::from(&[Reduce(PK::SingleValue1P1, 3usize)]),
        _ => vec![],
    }
}
fn action_augl_s43(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::STOP => Vec::from(&[Reduce(PK::LayoutItem0P2, 0usize)]),
        TK::WS => Vec::from(&[Shift(State::WSS44)]),
        TK::CommentLine => Vec::from(&[Shift(State::CommentLineS45)]),
        TK::START_COMMENT => Vec::from(&[Shift(State::START_COMMENTS46)]),
        _ => vec![],
    }
}
fn action_ws_s44(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::STOP => Vec::from(&[Reduce(PK::LayoutItemP1, 1usize)]),
        TK::WS => Vec::from(&[Reduce(PK::LayoutItemP1, 1usize)]),
        TK::CommentLine => Vec::from(&[Reduce(PK::LayoutItemP1, 1usize)]),
        TK::START_COMMENT => Vec::from(&[Reduce(PK::LayoutItemP1, 1usize)]),
        _ => vec![],
    }
}
fn action_commentline_s45(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::STOP => Vec::from(&[Reduce(PK::CommentP2, 1usize)]),
        TK::WS => Vec::from(&[Reduce(PK::CommentP2, 1usize)]),
        TK::CommentLine => Vec::from(&[Reduce(PK::CommentP2, 1usize)]),
        TK::NotComment => Vec::from(&[Reduce(PK::CommentP2, 1usize)]),
        TK::START_COMMENT => Vec::from(&[Reduce(PK::CommentP2, 1usize)]),
        TK::END_COMMENT => Vec::from(&[Reduce(PK::CommentP2, 1usize)]),
        _ => vec![],
    }
}
fn action_start_comment_s46(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::WS => Vec::from(&[Shift(State::WSS52)]),
        TK::CommentLine => Vec::from(&[Shift(State::CommentLineS45)]),
        TK::NotComment => Vec::from(&[Shift(State::NotCommentS53)]),
        TK::START_COMMENT => Vec::from(&[Shift(State::START_COMMENTS46)]),
        TK::END_COMMENT => Vec::from(&[Reduce(PK::Cornc0P2, 0usize)]),
        _ => vec![],
    }
}
fn action_layout_s47(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::STOP => Vec::from(&[Accept]),
        _ => vec![],
    }
}
fn action_layoutitem1_s48(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::STOP => Vec::from(&[Reduce(PK::LayoutItem0P1, 1usize)]),
        TK::WS => Vec::from(&[Shift(State::WSS44)]),
        TK::CommentLine => Vec::from(&[Shift(State::CommentLineS45)]),
        TK::START_COMMENT => Vec::from(&[Shift(State::START_COMMENTS46)]),
        _ => vec![],
    }
}
fn action_layoutitem0_s49(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::STOP => Vec::from(&[Reduce(PK::LayoutP1, 1usize)]),
        _ => vec![],
    }
}
fn action_layoutitem_s50(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::STOP => Vec::from(&[Reduce(PK::LayoutItem1P2, 1usize)]),
        TK::WS => Vec::from(&[Reduce(PK::LayoutItem1P2, 1usize)]),
        TK::CommentLine => Vec::from(&[Reduce(PK::LayoutItem1P2, 1usize)]),
        TK::START_COMMENT => Vec::from(&[Reduce(PK::LayoutItem1P2, 1usize)]),
        _ => vec![],
    }
}
fn action_comment_s51(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::STOP => Vec::from(&[Reduce(PK::LayoutItemP2, 1usize)]),
        TK::WS => Vec::from(&[Reduce(PK::LayoutItemP2, 1usize)]),
        TK::CommentLine => Vec::from(&[Reduce(PK::LayoutItemP2, 1usize)]),
        TK::START_COMMENT => Vec::from(&[Reduce(PK::LayoutItemP2, 1usize)]),
        _ => vec![],
    }
}
fn action_ws_s52(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::WS => Vec::from(&[Reduce(PK::CorncP3, 1usize)]),
        TK::CommentLine => Vec::from(&[Reduce(PK::CorncP3, 1usize)]),
        TK::NotComment => Vec::from(&[Reduce(PK::CorncP3, 1usize)]),
        TK::START_COMMENT => Vec::from(&[Reduce(PK::CorncP3, 1usize)]),
        TK::END_COMMENT => Vec::from(&[Reduce(PK::CorncP3, 1usize)]),
        _ => vec![],
    }
}
fn action_notcomment_s53(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::WS => Vec::from(&[Reduce(PK::CorncP2, 1usize)]),
        TK::CommentLine => Vec::from(&[Reduce(PK::CorncP2, 1usize)]),
        TK::NotComment => Vec::from(&[Reduce(PK::CorncP2, 1usize)]),
        TK::START_COMMENT => Vec::from(&[Reduce(PK::CorncP2, 1usize)]),
        TK::END_COMMENT => Vec::from(&[Reduce(PK::CorncP2, 1usize)]),
        _ => vec![],
    }
}
fn action_comment_s54(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::WS => Vec::from(&[Reduce(PK::CorncP1, 1usize)]),
        TK::CommentLine => Vec::from(&[Reduce(PK::CorncP1, 1usize)]),
        TK::NotComment => Vec::from(&[Reduce(PK::CorncP1, 1usize)]),
        TK::START_COMMENT => Vec::from(&[Reduce(PK::CorncP1, 1usize)]),
        TK::END_COMMENT => Vec::from(&[Reduce(PK::CorncP1, 1usize)]),
        _ => vec![],
    }
}
fn action_corncs_s55(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::END_COMMENT => Vec::from(&[Shift(State::END_COMMENTS60)]),
        _ => vec![],
    }
}
fn action_cornc1_s56(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::WS => Vec::from(&[Shift(State::WSS52)]),
        TK::CommentLine => Vec::from(&[Shift(State::CommentLineS45)]),
        TK::NotComment => Vec::from(&[Shift(State::NotCommentS53)]),
        TK::START_COMMENT => Vec::from(&[Shift(State::START_COMMENTS46)]),
        TK::END_COMMENT => Vec::from(&[Reduce(PK::Cornc0P1, 1usize)]),
        _ => vec![],
    }
}
fn action_cornc0_s57(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::END_COMMENT => Vec::from(&[Reduce(PK::CorncsP1, 1usize)]),
        _ => vec![],
    }
}
fn action_cornc_s58(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::WS => Vec::from(&[Reduce(PK::Cornc1P2, 1usize)]),
        TK::CommentLine => Vec::from(&[Reduce(PK::Cornc1P2, 1usize)]),
        TK::NotComment => Vec::from(&[Reduce(PK::Cornc1P2, 1usize)]),
        TK::START_COMMENT => Vec::from(&[Reduce(PK::Cornc1P2, 1usize)]),
        TK::END_COMMENT => Vec::from(&[Reduce(PK::Cornc1P2, 1usize)]),
        _ => vec![],
    }
}
fn action_layoutitem_s59(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::STOP => Vec::from(&[Reduce(PK::LayoutItem1P1, 2usize)]),
        TK::WS => Vec::from(&[Reduce(PK::LayoutItem1P1, 2usize)]),
        TK::CommentLine => Vec::from(&[Reduce(PK::LayoutItem1P1, 2usize)]),
        TK::START_COMMENT => Vec::from(&[Reduce(PK::LayoutItem1P1, 2usize)]),
        _ => vec![],
    }
}
fn action_end_comment_s60(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::STOP => Vec::from(&[Reduce(PK::CommentP1, 3usize)]),
        TK::WS => Vec::from(&[Reduce(PK::CommentP1, 3usize)]),
        TK::CommentLine => Vec::from(&[Reduce(PK::CommentP1, 3usize)]),
        TK::NotComment => Vec::from(&[Reduce(PK::CommentP1, 3usize)]),
        TK::START_COMMENT => Vec::from(&[Reduce(PK::CommentP1, 3usize)]),
        TK::END_COMMENT => Vec::from(&[Reduce(PK::CommentP1, 3usize)]),
        _ => vec![],
    }
}
fn action_cornc_s61(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::WS => Vec::from(&[Reduce(PK::Cornc1P1, 2usize)]),
        TK::CommentLine => Vec::from(&[Reduce(PK::Cornc1P1, 2usize)]),
        TK::NotComment => Vec::from(&[Reduce(PK::Cornc1P1, 2usize)]),
        TK::START_COMMENT => Vec::from(&[Reduce(PK::Cornc1P1, 2usize)]),
        TK::END_COMMENT => Vec::from(&[Reduce(PK::Cornc1P1, 2usize)]),
        _ => vec![],
    }
}
fn goto_aug_s0(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::Pg => State::PgS2,
        NonTermKind::Nodes => State::NodesS3,
        NonTermKind::Node1 => State::Node1S4,
        NonTermKind::Node => State::NodeS5,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::AUGS0
            )
        }
    }
}
fn goto_open_paren_s1(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::Id => State::IdS7,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::OPEN_PARENS1
            )
        }
    }
}
fn goto_id_s7(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::LabelPropertySpec => State::LabelPropertySpecS10,
        NonTermKind::LabelSpecOpt => State::LabelSpecOptS11,
        NonTermKind::LabelSpec => State::LabelSpecS12,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::IdS7
            )
        }
    }
}
fn goto_semicolon_s8(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::Node => State::NodeS13,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::SEMICOLONS8
            )
        }
    }
}
fn goto_colon_s9(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::IDENTIFIER1 => State::IDENTIFIER1S15,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::COLONS9
            )
        }
    }
}
fn goto_labelspecopt_s11(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::PropertySpecOpt => State::PropertySpecOptS18,
        NonTermKind::PropertySpec => State::PropertySpecS19,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::LabelSpecOptS11
            )
        }
    }
}
fn goto_open_curly_s17(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::Properties => State::PropertiesS22,
        NonTermKind::Property1 => State::Property1S23,
        NonTermKind::Property => State::PropertyS24,
        NonTermKind::key => State::keyS25,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::OPEN_CURLYS17
            )
        }
    }
}
fn goto_comma_s28(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::Property => State::PropertyS30,
        NonTermKind::key => State::keyS25,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::COMMAS28
            )
        }
    }
}
fn goto_colon_s29(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::Values => State::ValuesS34,
        NonTermKind::SingleValue => State::SingleValueS35,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::COLONS29
            )
        }
    }
}
fn goto_opensquarebracket_s33(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::ListValues => State::ListValuesS36,
        NonTermKind::SingleValue1 => State::SingleValue1S37,
        NonTermKind::SingleValue0 => State::SingleValue0S38,
        NonTermKind::SingleValue => State::SingleValueS39,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::OPENSQUAREBRACKETS33
            )
        }
    }
}
fn goto_comma_s41(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::SingleValue => State::SingleValueS42,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::COMMAS41
            )
        }
    }
}
fn goto_augl_s43(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::Layout => State::LayoutS47,
        NonTermKind::LayoutItem1 => State::LayoutItem1S48,
        NonTermKind::LayoutItem0 => State::LayoutItem0S49,
        NonTermKind::LayoutItem => State::LayoutItemS50,
        NonTermKind::Comment => State::CommentS51,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::AUGLS43
            )
        }
    }
}
fn goto_start_comment_s46(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::Comment => State::CommentS54,
        NonTermKind::Corncs => State::CorncsS55,
        NonTermKind::Cornc1 => State::Cornc1S56,
        NonTermKind::Cornc0 => State::Cornc0S57,
        NonTermKind::Cornc => State::CorncS58,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::START_COMMENTS46
            )
        }
    }
}
fn goto_layoutitem1_s48(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::LayoutItem => State::LayoutItemS59,
        NonTermKind::Comment => State::CommentS51,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::LayoutItem1S48
            )
        }
    }
}
fn goto_cornc1_s56(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::Comment => State::CommentS54,
        NonTermKind::Cornc => State::CorncS61,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::Cornc1S56
            )
        }
    }
}
fn goto_invalid(_nonterm_kind: NonTermKind) -> State {
    panic!("Invalid GOTO entry!");
}
pub(crate) static PARSER_DEFINITION: PgParserDefinition = PgParserDefinition {
    actions: [
        action_aug_s0,
        action_open_paren_s1,
        action_pg_s2,
        action_nodes_s3,
        action_node1_s4,
        action_node_s5,
        action_identifier_s6,
        action_id_s7,
        action_semicolon_s8,
        action_colon_s9,
        action_labelpropertyspec_s10,
        action_labelspecopt_s11,
        action_labelspec_s12,
        action_node_s13,
        action_identifier_s14,
        action_identifier1_s15,
        action_close_paren_s16,
        action_open_curly_s17,
        action_propertyspecopt_s18,
        action_propertyspec_s19,
        action_ampersand_s20,
        action_identifier_s21,
        action_properties_s22,
        action_property1_s23,
        action_property_s24,
        action_key_s25,
        action_identifier_s26,
        action_close_curly_s27,
        action_comma_s28,
        action_colon_s29,
        action_property_s30,
        action_quoted_string_s31,
        action_number_s32,
        action_opensquarebracket_s33,
        action_values_s34,
        action_singlevalue_s35,
        action_listvalues_s36,
        action_singlevalue1_s37,
        action_singlevalue0_s38,
        action_singlevalue_s39,
        action_closesquarebracket_s40,
        action_comma_s41,
        action_singlevalue_s42,
        action_augl_s43,
        action_ws_s44,
        action_commentline_s45,
        action_start_comment_s46,
        action_layout_s47,
        action_layoutitem1_s48,
        action_layoutitem0_s49,
        action_layoutitem_s50,
        action_comment_s51,
        action_ws_s52,
        action_notcomment_s53,
        action_comment_s54,
        action_corncs_s55,
        action_cornc1_s56,
        action_cornc0_s57,
        action_cornc_s58,
        action_layoutitem_s59,
        action_end_comment_s60,
        action_cornc_s61,
    ],
    gotos: [
        goto_aug_s0,
        goto_open_paren_s1,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_id_s7,
        goto_semicolon_s8,
        goto_colon_s9,
        goto_invalid,
        goto_labelspecopt_s11,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_open_curly_s17,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_comma_s28,
        goto_colon_s29,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_opensquarebracket_s33,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_comma_s41,
        goto_invalid,
        goto_augl_s43,
        goto_invalid,
        goto_invalid,
        goto_start_comment_s46,
        goto_invalid,
        goto_layoutitem1_s48,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_cornc1_s56,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
    ],
    token_kinds: [
        [Some((TK::OPEN_PAREN, true)), None, None, None, None, None],
        [Some((TK::IDENTIFIER, false)), None, None, None, None, None],
        [Some((TK::STOP, false)), None, None, None, None, None],
        [Some((TK::STOP, false)), None, None, None, None, None],
        [
            Some((TK::STOP, true)),
            Some((TK::SEMICOLON, true)),
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::STOP, true)),
            Some((TK::SEMICOLON, true)),
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::CLOSE_PAREN, true)),
            Some((TK::OPEN_CURLY, true)),
            Some((TK::COLON, true)),
            None,
            None,
            None,
        ],
        [
            Some((TK::CLOSE_PAREN, true)),
            Some((TK::OPEN_CURLY, true)),
            Some((TK::COLON, true)),
            None,
            None,
            None,
        ],
        [Some((TK::OPEN_PAREN, true)), None, None, None, None, None],
        [Some((TK::IDENTIFIER, false)), None, None, None, None, None],
        [Some((TK::CLOSE_PAREN, true)), None, None, None, None, None],
        [
            Some((TK::CLOSE_PAREN, true)),
            Some((TK::OPEN_CURLY, true)),
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::CLOSE_PAREN, true)),
            Some((TK::OPEN_CURLY, true)),
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::STOP, true)),
            Some((TK::SEMICOLON, true)),
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::CLOSE_PAREN, true)),
            Some((TK::OPEN_CURLY, true)),
            Some((TK::AMPERSAND, true)),
            None,
            None,
            None,
        ],
        [
            Some((TK::CLOSE_PAREN, true)),
            Some((TK::OPEN_CURLY, true)),
            Some((TK::AMPERSAND, true)),
            None,
            None,
            None,
        ],
        [
            Some((TK::STOP, true)),
            Some((TK::SEMICOLON, true)),
            None,
            None,
            None,
            None,
        ],
        [Some((TK::IDENTIFIER, false)), None, None, None, None, None],
        [Some((TK::CLOSE_PAREN, true)), None, None, None, None, None],
        [Some((TK::CLOSE_PAREN, true)), None, None, None, None, None],
        [Some((TK::IDENTIFIER, false)), None, None, None, None, None],
        [Some((TK::COLON, true)), None, None, None, None, None],
        [Some((TK::CLOSE_CURLY, true)), None, None, None, None, None],
        [
            Some((TK::CLOSE_CURLY, true)),
            Some((TK::COMMA, true)),
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::CLOSE_CURLY, true)),
            Some((TK::COMMA, true)),
            None,
            None,
            None,
            None,
        ],
        [Some((TK::COLON, true)), None, None, None, None, None],
        [
            Some((TK::CLOSE_PAREN, true)),
            Some((TK::OPEN_CURLY, true)),
            Some((TK::AMPERSAND, true)),
            None,
            None,
            None,
        ],
        [Some((TK::CLOSE_PAREN, true)), None, None, None, None, None],
        [Some((TK::IDENTIFIER, false)), None, None, None, None, None],
        [
            Some((TK::OPENSQUAREBRACKET, true)),
            Some((TK::QUOTED_STRING, false)),
            Some((TK::NUMBER, false)),
            None,
            None,
            None,
        ],
        [
            Some((TK::CLOSE_CURLY, true)),
            Some((TK::COMMA, true)),
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::CLOSE_CURLY, true)),
            Some((TK::COMMA, true)),
            Some((TK::CLOSESQUAREBRACKET, true)),
            None,
            None,
            None,
        ],
        [
            Some((TK::CLOSE_CURLY, true)),
            Some((TK::COMMA, true)),
            Some((TK::CLOSESQUAREBRACKET, true)),
            None,
            None,
            None,
        ],
        [
            Some((TK::CLOSESQUAREBRACKET, true)),
            Some((TK::QUOTED_STRING, false)),
            Some((TK::NUMBER, false)),
            None,
            None,
            None,
        ],
        [
            Some((TK::CLOSE_CURLY, true)),
            Some((TK::COMMA, true)),
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::CLOSE_CURLY, true)),
            Some((TK::COMMA, true)),
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::CLOSESQUAREBRACKET, true)),
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::COMMA, true)),
            Some((TK::CLOSESQUAREBRACKET, true)),
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::CLOSESQUAREBRACKET, true)),
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::COMMA, true)),
            Some((TK::CLOSESQUAREBRACKET, true)),
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::CLOSE_CURLY, true)),
            Some((TK::COMMA, true)),
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::QUOTED_STRING, false)),
            Some((TK::NUMBER, false)),
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::COMMA, true)),
            Some((TK::CLOSESQUAREBRACKET, true)),
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::STOP, true)),
            Some((TK::START_COMMENT, true)),
            Some((TK::WS, false)),
            Some((TK::CommentLine, false)),
            None,
            None,
        ],
        [
            Some((TK::STOP, true)),
            Some((TK::START_COMMENT, true)),
            Some((TK::WS, false)),
            Some((TK::CommentLine, false)),
            None,
            None,
        ],
        [
            Some((TK::STOP, true)),
            Some((TK::START_COMMENT, true)),
            Some((TK::END_COMMENT, true)),
            Some((TK::WS, false)),
            Some((TK::CommentLine, false)),
            Some((TK::NotComment, false)),
        ],
        [
            Some((TK::START_COMMENT, true)),
            Some((TK::END_COMMENT, true)),
            Some((TK::WS, false)),
            Some((TK::CommentLine, false)),
            Some((TK::NotComment, false)),
            None,
        ],
        [Some((TK::STOP, false)), None, None, None, None, None],
        [
            Some((TK::STOP, true)),
            Some((TK::START_COMMENT, true)),
            Some((TK::WS, false)),
            Some((TK::CommentLine, false)),
            None,
            None,
        ],
        [Some((TK::STOP, false)), None, None, None, None, None],
        [
            Some((TK::STOP, true)),
            Some((TK::START_COMMENT, true)),
            Some((TK::WS, false)),
            Some((TK::CommentLine, false)),
            None,
            None,
        ],
        [
            Some((TK::STOP, true)),
            Some((TK::START_COMMENT, true)),
            Some((TK::WS, false)),
            Some((TK::CommentLine, false)),
            None,
            None,
        ],
        [
            Some((TK::START_COMMENT, true)),
            Some((TK::END_COMMENT, true)),
            Some((TK::WS, false)),
            Some((TK::CommentLine, false)),
            Some((TK::NotComment, false)),
            None,
        ],
        [
            Some((TK::START_COMMENT, true)),
            Some((TK::END_COMMENT, true)),
            Some((TK::WS, false)),
            Some((TK::CommentLine, false)),
            Some((TK::NotComment, false)),
            None,
        ],
        [
            Some((TK::START_COMMENT, true)),
            Some((TK::END_COMMENT, true)),
            Some((TK::WS, false)),
            Some((TK::CommentLine, false)),
            Some((TK::NotComment, false)),
            None,
        ],
        [Some((TK::END_COMMENT, true)), None, None, None, None, None],
        [
            Some((TK::START_COMMENT, true)),
            Some((TK::END_COMMENT, true)),
            Some((TK::WS, false)),
            Some((TK::CommentLine, false)),
            Some((TK::NotComment, false)),
            None,
        ],
        [Some((TK::END_COMMENT, true)), None, None, None, None, None],
        [
            Some((TK::START_COMMENT, true)),
            Some((TK::END_COMMENT, true)),
            Some((TK::WS, false)),
            Some((TK::CommentLine, false)),
            Some((TK::NotComment, false)),
            None,
        ],
        [
            Some((TK::STOP, true)),
            Some((TK::START_COMMENT, true)),
            Some((TK::WS, false)),
            Some((TK::CommentLine, false)),
            None,
            None,
        ],
        [
            Some((TK::STOP, true)),
            Some((TK::START_COMMENT, true)),
            Some((TK::END_COMMENT, true)),
            Some((TK::WS, false)),
            Some((TK::CommentLine, false)),
            Some((TK::NotComment, false)),
        ],
        [
            Some((TK::START_COMMENT, true)),
            Some((TK::END_COMMENT, true)),
            Some((TK::WS, false)),
            Some((TK::CommentLine, false)),
            Some((TK::NotComment, false)),
            None,
        ],
    ],
};
impl ParserDefinition<State, ProdKind, TokenKind, NonTermKind> for PgParserDefinition {
    fn actions(&self, state: State, token: TokenKind) -> Vec<Action<State, ProdKind>> {
        PARSER_DEFINITION.actions[state as usize](token)
    }
    fn goto(&self, state: State, nonterm: NonTermKind) -> State {
        PARSER_DEFINITION.gotos[state as usize](nonterm)
    }
    fn expected_token_kinds(&self, state: State) -> Vec<(TokenKind, bool)> {
        PARSER_DEFINITION.token_kinds[state as usize]
            .iter()
            .map_while(|t| *t)
            .collect()
    }
    fn longest_match() -> bool {
        true
    }
    fn grammar_order() -> bool {
        true
    }
}
pub(crate) type Context<'i, I> = LRContext<'i, I, State, TokenKind>;
pub struct PgParser<
    'i,
    I: InputT + ?Sized,
    L: Lexer<'i, Context<'i, I>, State, TokenKind, Input = I>,
    B,
>(
    LRParser<
        'i,
        Context<'i, I>,
        State,
        ProdKind,
        TokenKind,
        NonTermKind,
        PgParserDefinition,
        L,
        B,
        I,
    >,
);
#[allow(dead_code)]
impl<'i>
    PgParser<
        'i,
        Input,
        StringLexer<Context<'i, Input>, State, TokenKind, TokenRecognizer, TERMINAL_COUNT>,
        DefaultBuilder,
    >
{
    pub fn new() -> Self {
        Self(LRParser::new(
            &PARSER_DEFINITION,
            State::default(),
            false,
            true,
            StringLexer::new(false, &RECOGNIZERS),
            DefaultBuilder::new(),
        ))
    }
}
#[allow(dead_code)]
impl<'i, I, L, B> Parser<'i, I, Context<'i, I>, State, TokenKind> for PgParser<'i, I, L, B>
where
    I: InputT + ?Sized + Debug,
    L: Lexer<'i, Context<'i, I>, State, TokenKind, Input = I>,
    B: LRBuilder<'i, I, Context<'i, I>, State, ProdKind, TokenKind>,
{
    type Output = B::Output;
    fn parse(&self, input: &'i I) -> Result<Self::Output> {
        self.0.parse(input)
    }
    fn parse_with_context(
        &self,
        context: &mut Context<'i, I>,
        input: &'i I,
    ) -> Result<Self::Output> {
        self.0.parse_with_context(context, input)
    }
    fn parse_file<'a, F: AsRef<std::path::Path>>(&'a mut self, file: F) -> Result<Self::Output>
    where
        'a: 'i,
    {
        self.0.parse_file(file)
    }
}
#[allow(dead_code)]
#[derive(Debug)]
pub enum Recognizer {
    Stop,
    StrMatch(&'static str),
    RegexMatch(Lazy<Regex>),
}
#[allow(dead_code)]
#[derive(Debug)]
pub struct TokenRecognizer(TokenKind, Recognizer);
impl<'i> TokenRecognizerT<'i> for TokenRecognizer {
    fn recognize(&self, input: &'i str) -> Option<&'i str> {
        match &self {
            #[allow(unused_variables)]
            TokenRecognizer(token_kind, Recognizer::StrMatch(s)) => {
                logn!("{} {:?} -- ", "    Recognizing".green(), token_kind);
                if input.starts_with(s) {
                    log!("{}", "recognized".bold().green());
                    Some(s)
                } else {
                    log!("{}", "not recognized".red());
                    None
                }
            }
            #[allow(unused_variables)]
            TokenRecognizer(token_kind, Recognizer::RegexMatch(r)) => {
                logn!("{} {:?} -- ", "    Recognizing".green(), token_kind);
                let match_str = r.find(input);
                match match_str {
                    Some(x) => {
                        let x_str = x.as_str();
                        log!("{} '{}'", "recognized".bold().green(), x_str);
                        Some(x_str)
                    }
                    _ => {
                        log!("{}", "not recognized".red());
                        None
                    }
                }
            }
            TokenRecognizer(_, Recognizer::Stop) => {
                logn!("{} STOP -- ", "    Recognizing".green());
                if input.is_empty() {
                    log!("{}", "recognized".bold().green());
                    Some("")
                } else {
                    log!("{}", "not recognized".red());
                    None
                }
            }
        }
    }
}
pub(crate) static RECOGNIZERS: [TokenRecognizer; TERMINAL_COUNT] = [
    TokenRecognizer(TokenKind::STOP, Recognizer::Stop),
    TokenRecognizer(
        TokenKind::WS,
        Recognizer::RegexMatch(Lazy::new(|| Regex::new(concat!("^", "\\s+")).unwrap())),
    ),
    TokenRecognizer(
        TokenKind::CommentLine,
        Recognizer::RegexMatch(Lazy::new(|| Regex::new(concat!("^", "//.*")).unwrap())),
    ),
    TokenRecognizer(
        TokenKind::NotComment,
        Recognizer::RegexMatch(Lazy::new(|| {
            Regex::new(concat!("^", "((\\*[^/])|[^\\s*/]|/[^\\*])+")).unwrap()
        })),
    ),
    TokenRecognizer(TokenKind::START_COMMENT, Recognizer::StrMatch("/*")),
    TokenRecognizer(TokenKind::END_COMMENT, Recognizer::StrMatch("*/")),
    TokenRecognizer(
        TokenKind::QUOTED_STRING,
        Recognizer::RegexMatch(Lazy::new(|| {
            Regex::new(concat!("^", "\"((\\\\\")|[^\"])*\"")).unwrap()
        })),
    ),
    TokenRecognizer(
        TokenKind::IDENTIFIER,
        Recognizer::RegexMatch(Lazy::new(|| Regex::new(concat!("^", "\\w+")).unwrap())),
    ),
    TokenRecognizer(TokenKind::SEMICOLON, Recognizer::StrMatch(";")),
    TokenRecognizer(TokenKind::CREATE, Recognizer::StrMatch("CREATE")),
    TokenRecognizer(TokenKind::NODE, Recognizer::StrMatch("NODE")),
    TokenRecognizer(TokenKind::EDGE, Recognizer::StrMatch("EDGE")),
    TokenRecognizer(TokenKind::GRAPH, Recognizer::StrMatch("GRAPH")),
    TokenRecognizer(TokenKind::TYPE, Recognizer::StrMatch("TYPE")),
    TokenRecognizer(TokenKind::OPEN_PAREN, Recognizer::StrMatch("(")),
    TokenRecognizer(TokenKind::CLOSE_PAREN, Recognizer::StrMatch(")")),
    TokenRecognizer(TokenKind::OPEN_ARROW, Recognizer::StrMatch("-[")),
    TokenRecognizer(TokenKind::CLOSE_ARROW, Recognizer::StrMatch("]->")),
    TokenRecognizer(TokenKind::OPEN_CURLY, Recognizer::StrMatch("{")),
    TokenRecognizer(TokenKind::CLOSE_CURLY, Recognizer::StrMatch("}")),
    TokenRecognizer(TokenKind::COLON, Recognizer::StrMatch(":")),
    TokenRecognizer(TokenKind::COMMA, Recognizer::StrMatch(",")),
    TokenRecognizer(TokenKind::BAR, Recognizer::StrMatch("|")),
    TokenRecognizer(TokenKind::PLUS, Recognizer::StrMatch("+")),
    TokenRecognizer(TokenKind::STAR, Recognizer::StrMatch("*")),
    TokenRecognizer(TokenKind::QUESTION, Recognizer::StrMatch("?")),
    TokenRecognizer(TokenKind::INTEGER_NAME, Recognizer::StrMatch("INTEGER")),
    TokenRecognizer(TokenKind::STRING_NAME, Recognizer::StrMatch("STRING")),
    TokenRecognizer(TokenKind::DATE_NAME, Recognizer::StrMatch("DATE")),
    TokenRecognizer(
        TokenKind::NUMBER,
        Recognizer::RegexMatch(Lazy::new(|| Regex::new(concat!("^", "\\d+")).unwrap())),
    ),
    TokenRecognizer(TokenKind::OPTIONAL, Recognizer::StrMatch("OPTIONAL")),
    TokenRecognizer(TokenKind::QUOTE, Recognizer::StrMatch("\\\"")),
    TokenRecognizer(TokenKind::AMPERSAND, Recognizer::StrMatch("&")),
    TokenRecognizer(TokenKind::OPENSQUAREBRACKET, Recognizer::StrMatch("[")),
    TokenRecognizer(TokenKind::CLOSESQUAREBRACKET, Recognizer::StrMatch("]")),
];
pub struct DefaultBuilder {
    res_stack: Vec<Symbol>,
}
impl DefaultBuilder {
    #[allow(dead_code)]
    pub fn new() -> Self {
        Self { res_stack: vec![] }
    }
}
impl Builder for DefaultBuilder {
    type Output = pg_actions::Pg;
    fn get_result(&mut self) -> Self::Output {
        match self.res_stack.pop().unwrap() {
            Symbol::NonTerminal(NonTerminal::Pg(r)) => r,
            _ => panic!("Invalid result on the parse stack!"),
        }
    }
}
impl<'i> LRBuilder<'i, Input, Context<'i, Input>, State, ProdKind, TokenKind> for DefaultBuilder {
    #![allow(unused_variables)]
    fn shift_action(&mut self, context: &Context<'i, Input>, token: Token<'i, Input, TokenKind>) {
        let val = match token.kind {
            TokenKind::STOP => panic!("Cannot shift STOP token!"),
            TokenKind::QUOTED_STRING => {
                Terminal::QUOTED_STRING(pg_actions::quoted_string(context, token))
            }
            TokenKind::IDENTIFIER => Terminal::IDENTIFIER(pg_actions::identifier(context, token)),
            TokenKind::SEMICOLON => Terminal::SEMICOLON,
            TokenKind::OPEN_PAREN => Terminal::OPEN_PAREN,
            TokenKind::CLOSE_PAREN => Terminal::CLOSE_PAREN,
            TokenKind::OPEN_CURLY => Terminal::OPEN_CURLY,
            TokenKind::CLOSE_CURLY => Terminal::CLOSE_CURLY,
            TokenKind::COLON => Terminal::COLON,
            TokenKind::COMMA => Terminal::COMMA,
            TokenKind::NUMBER => Terminal::NUMBER(pg_actions::number(context, token)),
            TokenKind::AMPERSAND => Terminal::AMPERSAND,
            TokenKind::OPENSQUAREBRACKET => Terminal::OPENSQUAREBRACKET,
            TokenKind::CLOSESQUAREBRACKET => Terminal::CLOSESQUAREBRACKET,
            _ => panic!("Shift of unreachable terminal!"),
        };
        self.res_stack.push(Symbol::Terminal(val));
    }
    fn reduce_action(&mut self, context: &Context<'i, Input>, prod: ProdKind, prod_len: usize) {
        let prod = match prod {
            ProdKind::PgP1 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 1usize)
                    .into_iter();
                match i.next().unwrap() {
                    Symbol::NonTerminal(NonTerminal::Nodes(p0)) => {
                        NonTerminal::Pg(pg_actions::pg_nodes(context, p0))
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::NodesP1 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 1usize)
                    .into_iter();
                match i.next().unwrap() {
                    Symbol::NonTerminal(NonTerminal::Node1(p0)) => {
                        NonTerminal::Nodes(pg_actions::nodes_node1(context, p0))
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::Node1P1 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 3usize)
                    .into_iter();
                match (i.next().unwrap(), i.next().unwrap(), i.next().unwrap()) {
                    (
                        Symbol::NonTerminal(NonTerminal::Node1(p0)),
                        _,
                        Symbol::NonTerminal(NonTerminal::Node(p1)),
                    ) => NonTerminal::Node1(pg_actions::node1_c1(context, p0, p1)),
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::Node1P2 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 1usize)
                    .into_iter();
                match i.next().unwrap() {
                    Symbol::NonTerminal(NonTerminal::Node(p0)) => {
                        NonTerminal::Node1(pg_actions::node1_node(context, p0))
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::NodeP1 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 4usize)
                    .into_iter();
                match (
                    i.next().unwrap(),
                    i.next().unwrap(),
                    i.next().unwrap(),
                    i.next().unwrap(),
                ) {
                    (
                        _,
                        Symbol::NonTerminal(NonTerminal::Id(p0)),
                        Symbol::NonTerminal(NonTerminal::LabelPropertySpec(p1)),
                        _,
                    ) => NonTerminal::Node(pg_actions::node_c1(context, p0, p1)),
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::IdP1 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 1usize)
                    .into_iter();
                match i.next().unwrap() {
                    Symbol::Terminal(Terminal::IDENTIFIER(p0)) => {
                        NonTerminal::Id(pg_actions::id_identifier(context, p0))
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::LabelPropertySpecP1 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 2usize)
                    .into_iter();
                match (i.next().unwrap(), i.next().unwrap()) {
                    (
                        Symbol::NonTerminal(NonTerminal::LabelSpecOpt(p0)),
                        Symbol::NonTerminal(NonTerminal::PropertySpecOpt(p1)),
                    ) => NonTerminal::LabelPropertySpec(pg_actions::label_property_spec_c1(
                        context, p0, p1,
                    )),
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::LabelSpecOptP1 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 1usize)
                    .into_iter();
                match i.next().unwrap() {
                    Symbol::NonTerminal(NonTerminal::LabelSpec(p0)) => NonTerminal::LabelSpecOpt(
                        pg_actions::label_spec_opt_label_spec(context, p0),
                    ),
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::LabelSpecOptP2 => {
                NonTerminal::LabelSpecOpt(pg_actions::label_spec_opt_empty(context))
            }
            ProdKind::PropertySpecOptP1 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 1usize)
                    .into_iter();
                match i.next().unwrap() {
                    Symbol::NonTerminal(NonTerminal::PropertySpec(p0)) => {
                        NonTerminal::PropertySpecOpt(pg_actions::property_spec_opt_property_spec(
                            context, p0,
                        ))
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::PropertySpecOptP2 => {
                NonTerminal::PropertySpecOpt(pg_actions::property_spec_opt_empty(context))
            }
            ProdKind::LabelSpecP1 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 2usize)
                    .into_iter();
                match (i.next().unwrap(), i.next().unwrap()) {
                    (_, Symbol::NonTerminal(NonTerminal::IDENTIFIER1(p0))) => {
                        NonTerminal::LabelSpec(pg_actions::label_spec_identifier1(context, p0))
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::IDENTIFIER1P1 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 3usize)
                    .into_iter();
                match (i.next().unwrap(), i.next().unwrap(), i.next().unwrap()) {
                    (
                        Symbol::NonTerminal(NonTerminal::IDENTIFIER1(p0)),
                        _,
                        Symbol::Terminal(Terminal::IDENTIFIER(p1)),
                    ) => NonTerminal::IDENTIFIER1(pg_actions::identifier1_c1(context, p0, p1)),
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::IDENTIFIER1P2 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 1usize)
                    .into_iter();
                match i.next().unwrap() {
                    Symbol::Terminal(Terminal::IDENTIFIER(p0)) => {
                        NonTerminal::IDENTIFIER1(pg_actions::identifier1_identifier(context, p0))
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::PropertySpecP1 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 3usize)
                    .into_iter();
                match (i.next().unwrap(), i.next().unwrap(), i.next().unwrap()) {
                    (_, Symbol::NonTerminal(NonTerminal::Properties(p0)), _) => {
                        NonTerminal::PropertySpec(pg_actions::property_spec_properties(context, p0))
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::PropertiesP1 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 1usize)
                    .into_iter();
                match i.next().unwrap() {
                    Symbol::NonTerminal(NonTerminal::Property1(p0)) => {
                        NonTerminal::Properties(pg_actions::properties_property1(context, p0))
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::Property1P1 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 3usize)
                    .into_iter();
                match (i.next().unwrap(), i.next().unwrap(), i.next().unwrap()) {
                    (
                        Symbol::NonTerminal(NonTerminal::Property1(p0)),
                        _,
                        Symbol::NonTerminal(NonTerminal::Property(p1)),
                    ) => NonTerminal::Property1(pg_actions::property1_c1(context, p0, p1)),
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::Property1P2 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 1usize)
                    .into_iter();
                match i.next().unwrap() {
                    Symbol::NonTerminal(NonTerminal::Property(p0)) => {
                        NonTerminal::Property1(pg_actions::property1_property(context, p0))
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::PropertyP1 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 3usize)
                    .into_iter();
                match (i.next().unwrap(), i.next().unwrap(), i.next().unwrap()) {
                    (
                        Symbol::NonTerminal(NonTerminal::key(p0)),
                        _,
                        Symbol::NonTerminal(NonTerminal::Values(p1)),
                    ) => NonTerminal::Property(pg_actions::property_c1(context, p0, p1)),
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::keyP1 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 1usize)
                    .into_iter();
                match i.next().unwrap() {
                    Symbol::Terminal(Terminal::IDENTIFIER(p0)) => {
                        NonTerminal::key(pg_actions::key_identifier(context, p0))
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::ValuesP1 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 1usize)
                    .into_iter();
                match i.next().unwrap() {
                    Symbol::NonTerminal(NonTerminal::SingleValue(p0)) => {
                        NonTerminal::Values(pg_actions::values_single_value(context, p0))
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::ValuesListValue => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 3usize)
                    .into_iter();
                match (i.next().unwrap(), i.next().unwrap(), i.next().unwrap()) {
                    (_, Symbol::NonTerminal(NonTerminal::ListValues(p0)), _) => {
                        NonTerminal::Values(pg_actions::values_list_value(context, p0))
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::ListValuesP1 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 1usize)
                    .into_iter();
                match i.next().unwrap() {
                    Symbol::NonTerminal(NonTerminal::SingleValue0(p0)) => {
                        NonTerminal::ListValues(pg_actions::list_values_single_value0(context, p0))
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::SingleValue1P1 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 3usize)
                    .into_iter();
                match (i.next().unwrap(), i.next().unwrap(), i.next().unwrap()) {
                    (
                        Symbol::NonTerminal(NonTerminal::SingleValue1(p0)),
                        _,
                        Symbol::NonTerminal(NonTerminal::SingleValue(p1)),
                    ) => NonTerminal::SingleValue1(pg_actions::single_value1_c1(context, p0, p1)),
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::SingleValue1P2 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 1usize)
                    .into_iter();
                match i.next().unwrap() {
                    Symbol::NonTerminal(NonTerminal::SingleValue(p0)) => NonTerminal::SingleValue1(
                        pg_actions::single_value1_single_value(context, p0),
                    ),
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::SingleValue0P1 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 1usize)
                    .into_iter();
                match i.next().unwrap() {
                    Symbol::NonTerminal(NonTerminal::SingleValue1(p0)) => {
                        NonTerminal::SingleValue0(pg_actions::single_value0_single_value1(
                            context, p0,
                        ))
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::SingleValue0P2 => {
                NonTerminal::SingleValue0(pg_actions::single_value0_empty(context))
            }
            ProdKind::SingleValueStringValue => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 1usize)
                    .into_iter();
                match i.next().unwrap() {
                    Symbol::Terminal(Terminal::QUOTED_STRING(p0)) => {
                        NonTerminal::SingleValue(pg_actions::single_value_string_value(context, p0))
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::SingleValueNumberValue => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 1usize)
                    .into_iter();
                match i.next().unwrap() {
                    Symbol::Terminal(Terminal::NUMBER(p0)) => {
                        NonTerminal::SingleValue(pg_actions::single_value_number_value(context, p0))
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            _ => panic!("Reduce of unreachable nonterminal!"),
        };
        self.res_stack.push(Symbol::NonTerminal(prod));
    }
}
